// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `auth_factor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PasswordAuthInput {
    // message fields
    pub secret: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PasswordAuthInput {
    fn default() -> &'a PasswordAuthInput {
        <PasswordAuthInput as ::protobuf::Message>::default_instance()
    }
}

impl PasswordAuthInput {
    pub fn new() -> PasswordAuthInput {
        ::std::default::Default::default()
    }

    // bytes secret = 1;


    pub fn get_secret(&self) -> &[u8] {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::vec::Vec<u8>) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.secret, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PasswordAuthInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.secret)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.secret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.secret.is_empty() {
            os.write_bytes(1, &self.secret)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PasswordAuthInput {
        PasswordAuthInput::new()
    }

    fn default_instance() -> &'static PasswordAuthInput {
        static instance: ::protobuf::rt::LazyV2<PasswordAuthInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PasswordAuthInput::new)
    }
}

impl ::protobuf::Clear for PasswordAuthInput {
    fn clear(&mut self) {
        self.secret.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PasswordAuthInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PinAuthInput {
    // message fields
    pub secret: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PinAuthInput {
    fn default() -> &'a PinAuthInput {
        <PinAuthInput as ::protobuf::Message>::default_instance()
    }
}

impl PinAuthInput {
    pub fn new() -> PinAuthInput {
        ::std::default::Default::default()
    }

    // bytes secret = 1;


    pub fn get_secret(&self) -> &[u8] {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::vec::Vec<u8>) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.secret, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PinAuthInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.secret)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.secret);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.secret.is_empty() {
            os.write_bytes(1, &self.secret)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PinAuthInput {
        PinAuthInput::new()
    }

    fn default_instance() -> &'static PinAuthInput {
        static instance: ::protobuf::rt::LazyV2<PinAuthInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PinAuthInput::new)
    }
}

impl ::protobuf::Clear for PinAuthInput {
    fn clear(&mut self) {
        self.secret.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PinAuthInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CryptohomeRecoveryAuthInput {
    // message fields
    pub mediator_pub_key: ::std::vec::Vec<u8>,
    pub epoch_response: ::std::vec::Vec<u8>,
    pub recovery_response: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CryptohomeRecoveryAuthInput {
    fn default() -> &'a CryptohomeRecoveryAuthInput {
        <CryptohomeRecoveryAuthInput as ::protobuf::Message>::default_instance()
    }
}

impl CryptohomeRecoveryAuthInput {
    pub fn new() -> CryptohomeRecoveryAuthInput {
        ::std::default::Default::default()
    }

    // bytes mediator_pub_key = 1;


    pub fn get_mediator_pub_key(&self) -> &[u8] {
        &self.mediator_pub_key
    }
    pub fn clear_mediator_pub_key(&mut self) {
        self.mediator_pub_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_mediator_pub_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.mediator_pub_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mediator_pub_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mediator_pub_key
    }

    // Take field
    pub fn take_mediator_pub_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mediator_pub_key, ::std::vec::Vec::new())
    }

    // bytes epoch_response = 2;


    pub fn get_epoch_response(&self) -> &[u8] {
        &self.epoch_response
    }
    pub fn clear_epoch_response(&mut self) {
        self.epoch_response.clear();
    }

    // Param is passed by value, moved
    pub fn set_epoch_response(&mut self, v: ::std::vec::Vec<u8>) {
        self.epoch_response = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_epoch_response(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.epoch_response
    }

    // Take field
    pub fn take_epoch_response(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.epoch_response, ::std::vec::Vec::new())
    }

    // bytes recovery_response = 3;


    pub fn get_recovery_response(&self) -> &[u8] {
        &self.recovery_response
    }
    pub fn clear_recovery_response(&mut self) {
        self.recovery_response.clear();
    }

    // Param is passed by value, moved
    pub fn set_recovery_response(&mut self, v: ::std::vec::Vec<u8>) {
        self.recovery_response = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_response(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.recovery_response
    }

    // Take field
    pub fn take_recovery_response(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.recovery_response, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CryptohomeRecoveryAuthInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mediator_pub_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.epoch_response)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.recovery_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.mediator_pub_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.mediator_pub_key);
        }
        if !self.epoch_response.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.epoch_response);
        }
        if !self.recovery_response.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.recovery_response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.mediator_pub_key.is_empty() {
            os.write_bytes(1, &self.mediator_pub_key)?;
        }
        if !self.epoch_response.is_empty() {
            os.write_bytes(2, &self.epoch_response)?;
        }
        if !self.recovery_response.is_empty() {
            os.write_bytes(3, &self.recovery_response)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptohomeRecoveryAuthInput {
        CryptohomeRecoveryAuthInput::new()
    }

    fn default_instance() -> &'static CryptohomeRecoveryAuthInput {
        static instance: ::protobuf::rt::LazyV2<CryptohomeRecoveryAuthInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CryptohomeRecoveryAuthInput::new)
    }
}

impl ::protobuf::Clear for CryptohomeRecoveryAuthInput {
    fn clear(&mut self) {
        self.mediator_pub_key.clear();
        self.epoch_response.clear();
        self.recovery_response.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptohomeRecoveryAuthInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KioskAuthInput {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KioskAuthInput {
    fn default() -> &'a KioskAuthInput {
        <KioskAuthInput as ::protobuf::Message>::default_instance()
    }
}

impl KioskAuthInput {
    pub fn new() -> KioskAuthInput {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for KioskAuthInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KioskAuthInput {
        KioskAuthInput::new()
    }

    fn default_instance() -> &'static KioskAuthInput {
        static instance: ::protobuf::rt::LazyV2<KioskAuthInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KioskAuthInput::new)
    }
}

impl ::protobuf::Clear for KioskAuthInput {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KioskAuthInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SmartCardAuthInput {
    // message fields
    pub signature_algorithms: ::std::vec::Vec<SmartCardSignatureAlgorithm>,
    pub key_delegate_dbus_service_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SmartCardAuthInput {
    fn default() -> &'a SmartCardAuthInput {
        <SmartCardAuthInput as ::protobuf::Message>::default_instance()
    }
}

impl SmartCardAuthInput {
    pub fn new() -> SmartCardAuthInput {
        ::std::default::Default::default()
    }

    // repeated .user_data_auth.SmartCardSignatureAlgorithm signature_algorithms = 1;


    pub fn get_signature_algorithms(&self) -> &[SmartCardSignatureAlgorithm] {
        &self.signature_algorithms
    }
    pub fn clear_signature_algorithms(&mut self) {
        self.signature_algorithms.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature_algorithms(&mut self, v: ::std::vec::Vec<SmartCardSignatureAlgorithm>) {
        self.signature_algorithms = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signature_algorithms(&mut self) -> &mut ::std::vec::Vec<SmartCardSignatureAlgorithm> {
        &mut self.signature_algorithms
    }

    // Take field
    pub fn take_signature_algorithms(&mut self) -> ::std::vec::Vec<SmartCardSignatureAlgorithm> {
        ::std::mem::replace(&mut self.signature_algorithms, ::std::vec::Vec::new())
    }

    // string key_delegate_dbus_service_name = 2;


    pub fn get_key_delegate_dbus_service_name(&self) -> &str {
        &self.key_delegate_dbus_service_name
    }
    pub fn clear_key_delegate_dbus_service_name(&mut self) {
        self.key_delegate_dbus_service_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_delegate_dbus_service_name(&mut self, v: ::std::string::String) {
        self.key_delegate_dbus_service_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_delegate_dbus_service_name(&mut self) -> &mut ::std::string::String {
        &mut self.key_delegate_dbus_service_name
    }

    // Take field
    pub fn take_key_delegate_dbus_service_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key_delegate_dbus_service_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SmartCardAuthInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.signature_algorithms, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key_delegate_dbus_service_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.signature_algorithms {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        if !self.key_delegate_dbus_service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key_delegate_dbus_service_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.signature_algorithms {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(v))?;
        };
        if !self.key_delegate_dbus_service_name.is_empty() {
            os.write_string(2, &self.key_delegate_dbus_service_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SmartCardAuthInput {
        SmartCardAuthInput::new()
    }

    fn default_instance() -> &'static SmartCardAuthInput {
        static instance: ::protobuf::rt::LazyV2<SmartCardAuthInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SmartCardAuthInput::new)
    }
}

impl ::protobuf::Clear for SmartCardAuthInput {
    fn clear(&mut self) {
        self.signature_algorithms.clear();
        self.key_delegate_dbus_service_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SmartCardAuthInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct LegacyFingerprintAuthInput {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LegacyFingerprintAuthInput {
    fn default() -> &'a LegacyFingerprintAuthInput {
        <LegacyFingerprintAuthInput as ::protobuf::Message>::default_instance()
    }
}

impl LegacyFingerprintAuthInput {
    pub fn new() -> LegacyFingerprintAuthInput {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LegacyFingerprintAuthInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LegacyFingerprintAuthInput {
        LegacyFingerprintAuthInput::new()
    }

    fn default_instance() -> &'static LegacyFingerprintAuthInput {
        static instance: ::protobuf::rt::LazyV2<LegacyFingerprintAuthInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LegacyFingerprintAuthInput::new)
    }
}

impl ::protobuf::Clear for LegacyFingerprintAuthInput {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for LegacyFingerprintAuthInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct AuthInput {
    // message oneof groups
    pub input: ::std::option::Option<AuthInput_oneof_input>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthInput {
    fn default() -> &'a AuthInput {
        <AuthInput as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AuthInput_oneof_input {
    password_input(PasswordAuthInput),
    pin_input(PinAuthInput),
    cryptohome_recovery_input(CryptohomeRecoveryAuthInput),
    kiosk_input(KioskAuthInput),
    smart_card_input(SmartCardAuthInput),
    legacy_fingerprint_input(LegacyFingerprintAuthInput),
}

impl AuthInput {
    pub fn new() -> AuthInput {
        ::std::default::Default::default()
    }

    // .user_data_auth.PasswordAuthInput password_input = 1;


    pub fn get_password_input(&self) -> &PasswordAuthInput {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::password_input(ref v)) => v,
            _ => <PasswordAuthInput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_password_input(&mut self) {
        self.input = ::std::option::Option::None;
    }

    pub fn has_password_input(&self) -> bool {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::password_input(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_password_input(&mut self, v: PasswordAuthInput) {
        self.input = ::std::option::Option::Some(AuthInput_oneof_input::password_input(v))
    }

    // Mutable pointer to the field.
    pub fn mut_password_input(&mut self) -> &mut PasswordAuthInput {
        if let ::std::option::Option::Some(AuthInput_oneof_input::password_input(_)) = self.input {
        } else {
            self.input = ::std::option::Option::Some(AuthInput_oneof_input::password_input(PasswordAuthInput::new()));
        }
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::password_input(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_password_input(&mut self) -> PasswordAuthInput {
        if self.has_password_input() {
            match self.input.take() {
                ::std::option::Option::Some(AuthInput_oneof_input::password_input(v)) => v,
                _ => panic!(),
            }
        } else {
            PasswordAuthInput::new()
        }
    }

    // .user_data_auth.PinAuthInput pin_input = 2;


    pub fn get_pin_input(&self) -> &PinAuthInput {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::pin_input(ref v)) => v,
            _ => <PinAuthInput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_pin_input(&mut self) {
        self.input = ::std::option::Option::None;
    }

    pub fn has_pin_input(&self) -> bool {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::pin_input(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pin_input(&mut self, v: PinAuthInput) {
        self.input = ::std::option::Option::Some(AuthInput_oneof_input::pin_input(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pin_input(&mut self) -> &mut PinAuthInput {
        if let ::std::option::Option::Some(AuthInput_oneof_input::pin_input(_)) = self.input {
        } else {
            self.input = ::std::option::Option::Some(AuthInput_oneof_input::pin_input(PinAuthInput::new()));
        }
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::pin_input(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pin_input(&mut self) -> PinAuthInput {
        if self.has_pin_input() {
            match self.input.take() {
                ::std::option::Option::Some(AuthInput_oneof_input::pin_input(v)) => v,
                _ => panic!(),
            }
        } else {
            PinAuthInput::new()
        }
    }

    // .user_data_auth.CryptohomeRecoveryAuthInput cryptohome_recovery_input = 3;


    pub fn get_cryptohome_recovery_input(&self) -> &CryptohomeRecoveryAuthInput {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(ref v)) => v,
            _ => <CryptohomeRecoveryAuthInput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cryptohome_recovery_input(&mut self) {
        self.input = ::std::option::Option::None;
    }

    pub fn has_cryptohome_recovery_input(&self) -> bool {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptohome_recovery_input(&mut self, v: CryptohomeRecoveryAuthInput) {
        self.input = ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptohome_recovery_input(&mut self) -> &mut CryptohomeRecoveryAuthInput {
        if let ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(_)) = self.input {
        } else {
            self.input = ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(CryptohomeRecoveryAuthInput::new()));
        }
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptohome_recovery_input(&mut self) -> CryptohomeRecoveryAuthInput {
        if self.has_cryptohome_recovery_input() {
            match self.input.take() {
                ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(v)) => v,
                _ => panic!(),
            }
        } else {
            CryptohomeRecoveryAuthInput::new()
        }
    }

    // .user_data_auth.KioskAuthInput kiosk_input = 4;


    pub fn get_kiosk_input(&self) -> &KioskAuthInput {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(ref v)) => v,
            _ => <KioskAuthInput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_kiosk_input(&mut self) {
        self.input = ::std::option::Option::None;
    }

    pub fn has_kiosk_input(&self) -> bool {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kiosk_input(&mut self, v: KioskAuthInput) {
        self.input = ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kiosk_input(&mut self) -> &mut KioskAuthInput {
        if let ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(_)) = self.input {
        } else {
            self.input = ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(KioskAuthInput::new()));
        }
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kiosk_input(&mut self) -> KioskAuthInput {
        if self.has_kiosk_input() {
            match self.input.take() {
                ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(v)) => v,
                _ => panic!(),
            }
        } else {
            KioskAuthInput::new()
        }
    }

    // .user_data_auth.SmartCardAuthInput smart_card_input = 5;


    pub fn get_smart_card_input(&self) -> &SmartCardAuthInput {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(ref v)) => v,
            _ => <SmartCardAuthInput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_smart_card_input(&mut self) {
        self.input = ::std::option::Option::None;
    }

    pub fn has_smart_card_input(&self) -> bool {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_smart_card_input(&mut self, v: SmartCardAuthInput) {
        self.input = ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(v))
    }

    // Mutable pointer to the field.
    pub fn mut_smart_card_input(&mut self) -> &mut SmartCardAuthInput {
        if let ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(_)) = self.input {
        } else {
            self.input = ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(SmartCardAuthInput::new()));
        }
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_smart_card_input(&mut self) -> SmartCardAuthInput {
        if self.has_smart_card_input() {
            match self.input.take() {
                ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(v)) => v,
                _ => panic!(),
            }
        } else {
            SmartCardAuthInput::new()
        }
    }

    // .user_data_auth.LegacyFingerprintAuthInput legacy_fingerprint_input = 6;


    pub fn get_legacy_fingerprint_input(&self) -> &LegacyFingerprintAuthInput {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(ref v)) => v,
            _ => <LegacyFingerprintAuthInput as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_legacy_fingerprint_input(&mut self) {
        self.input = ::std::option::Option::None;
    }

    pub fn has_legacy_fingerprint_input(&self) -> bool {
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_legacy_fingerprint_input(&mut self, v: LegacyFingerprintAuthInput) {
        self.input = ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(v))
    }

    // Mutable pointer to the field.
    pub fn mut_legacy_fingerprint_input(&mut self) -> &mut LegacyFingerprintAuthInput {
        if let ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(_)) = self.input {
        } else {
            self.input = ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(LegacyFingerprintAuthInput::new()));
        }
        match self.input {
            ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_legacy_fingerprint_input(&mut self) -> LegacyFingerprintAuthInput {
        if self.has_legacy_fingerprint_input() {
            match self.input.take() {
                ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(v)) => v,
                _ => panic!(),
            }
        } else {
            LegacyFingerprintAuthInput::new()
        }
    }
}

impl ::protobuf::Message for AuthInput {
    fn is_initialized(&self) -> bool {
        if let Some(AuthInput_oneof_input::password_input(ref v)) = self.input {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthInput_oneof_input::pin_input(ref v)) = self.input {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthInput_oneof_input::cryptohome_recovery_input(ref v)) = self.input {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthInput_oneof_input::kiosk_input(ref v)) = self.input {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthInput_oneof_input::smart_card_input(ref v)) = self.input {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthInput_oneof_input::legacy_fingerprint_input(ref v)) = self.input {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.input = ::std::option::Option::Some(AuthInput_oneof_input::password_input(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.input = ::std::option::Option::Some(AuthInput_oneof_input::pin_input(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.input = ::std::option::Option::Some(AuthInput_oneof_input::cryptohome_recovery_input(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.input = ::std::option::Option::Some(AuthInput_oneof_input::kiosk_input(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.input = ::std::option::Option::Some(AuthInput_oneof_input::smart_card_input(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.input = ::std::option::Option::Some(AuthInput_oneof_input::legacy_fingerprint_input(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.input {
            match v {
                &AuthInput_oneof_input::password_input(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthInput_oneof_input::pin_input(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthInput_oneof_input::cryptohome_recovery_input(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthInput_oneof_input::kiosk_input(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthInput_oneof_input::smart_card_input(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthInput_oneof_input::legacy_fingerprint_input(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.input {
            match v {
                &AuthInput_oneof_input::password_input(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthInput_oneof_input::pin_input(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthInput_oneof_input::cryptohome_recovery_input(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthInput_oneof_input::kiosk_input(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthInput_oneof_input::smart_card_input(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthInput_oneof_input::legacy_fingerprint_input(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthInput {
        AuthInput::new()
    }

    fn default_instance() -> &'static AuthInput {
        static instance: ::protobuf::rt::LazyV2<AuthInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthInput::new)
    }
}

impl ::protobuf::Clear for AuthInput {
    fn clear(&mut self) {
        self.input = ::std::option::Option::None;
        self.input = ::std::option::Option::None;
        self.input = ::std::option::Option::None;
        self.input = ::std::option::Option::None;
        self.input = ::std::option::Option::None;
        self.input = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PasswordMetadata {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PasswordMetadata {
    fn default() -> &'a PasswordMetadata {
        <PasswordMetadata as ::protobuf::Message>::default_instance()
    }
}

impl PasswordMetadata {
    pub fn new() -> PasswordMetadata {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PasswordMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PasswordMetadata {
        PasswordMetadata::new()
    }

    fn default_instance() -> &'static PasswordMetadata {
        static instance: ::protobuf::rt::LazyV2<PasswordMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PasswordMetadata::new)
    }
}

impl ::protobuf::Clear for PasswordMetadata {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PasswordMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PinMetadata {
    // message fields
    pub auth_locked: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PinMetadata {
    fn default() -> &'a PinMetadata {
        <PinMetadata as ::protobuf::Message>::default_instance()
    }
}

impl PinMetadata {
    pub fn new() -> PinMetadata {
        ::std::default::Default::default()
    }

    // bool auth_locked = 1;


    pub fn get_auth_locked(&self) -> bool {
        self.auth_locked
    }
    pub fn clear_auth_locked(&mut self) {
        self.auth_locked = false;
    }

    // Param is passed by value, moved
    pub fn set_auth_locked(&mut self, v: bool) {
        self.auth_locked = v;
    }
}

impl ::protobuf::Message for PinMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auth_locked = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.auth_locked != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.auth_locked != false {
            os.write_bool(1, self.auth_locked)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PinMetadata {
        PinMetadata::new()
    }

    fn default_instance() -> &'static PinMetadata {
        static instance: ::protobuf::rt::LazyV2<PinMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PinMetadata::new)
    }
}

impl ::protobuf::Clear for PinMetadata {
    fn clear(&mut self) {
        self.auth_locked = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PinMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CryptohomeRecoveryMetadata {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CryptohomeRecoveryMetadata {
    fn default() -> &'a CryptohomeRecoveryMetadata {
        <CryptohomeRecoveryMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CryptohomeRecoveryMetadata {
    pub fn new() -> CryptohomeRecoveryMetadata {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CryptohomeRecoveryMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CryptohomeRecoveryMetadata {
        CryptohomeRecoveryMetadata::new()
    }

    fn default_instance() -> &'static CryptohomeRecoveryMetadata {
        static instance: ::protobuf::rt::LazyV2<CryptohomeRecoveryMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CryptohomeRecoveryMetadata::new)
    }
}

impl ::protobuf::Clear for CryptohomeRecoveryMetadata {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptohomeRecoveryMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KioskMetadata {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KioskMetadata {
    fn default() -> &'a KioskMetadata {
        <KioskMetadata as ::protobuf::Message>::default_instance()
    }
}

impl KioskMetadata {
    pub fn new() -> KioskMetadata {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for KioskMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KioskMetadata {
        KioskMetadata::new()
    }

    fn default_instance() -> &'static KioskMetadata {
        static instance: ::protobuf::rt::LazyV2<KioskMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KioskMetadata::new)
    }
}

impl ::protobuf::Clear for KioskMetadata {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KioskMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SmartCardMetadata {
    // message fields
    pub public_key_spki_der: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SmartCardMetadata {
    fn default() -> &'a SmartCardMetadata {
        <SmartCardMetadata as ::protobuf::Message>::default_instance()
    }
}

impl SmartCardMetadata {
    pub fn new() -> SmartCardMetadata {
        ::std::default::Default::default()
    }

    // bytes public_key_spki_der = 1;


    pub fn get_public_key_spki_der(&self) -> &[u8] {
        &self.public_key_spki_der
    }
    pub fn clear_public_key_spki_der(&mut self) {
        self.public_key_spki_der.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key_spki_der(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key_spki_der = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key_spki_der(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key_spki_der
    }

    // Take field
    pub fn take_public_key_spki_der(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key_spki_der, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SmartCardMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key_spki_der)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public_key_spki_der.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.public_key_spki_der);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.public_key_spki_der.is_empty() {
            os.write_bytes(1, &self.public_key_spki_der)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SmartCardMetadata {
        SmartCardMetadata::new()
    }

    fn default_instance() -> &'static SmartCardMetadata {
        static instance: ::protobuf::rt::LazyV2<SmartCardMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SmartCardMetadata::new)
    }
}

impl ::protobuf::Clear for SmartCardMetadata {
    fn clear(&mut self) {
        self.public_key_spki_der.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SmartCardMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CommonMetadata {
    // message fields
    pub chromeos_version_last_updated: ::std::vec::Vec<u8>,
    pub chrome_version_last_updated: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommonMetadata {
    fn default() -> &'a CommonMetadata {
        <CommonMetadata as ::protobuf::Message>::default_instance()
    }
}

impl CommonMetadata {
    pub fn new() -> CommonMetadata {
        ::std::default::Default::default()
    }

    // bytes chromeos_version_last_updated = 1;


    pub fn get_chromeos_version_last_updated(&self) -> &[u8] {
        &self.chromeos_version_last_updated
    }
    pub fn clear_chromeos_version_last_updated(&mut self) {
        self.chromeos_version_last_updated.clear();
    }

    // Param is passed by value, moved
    pub fn set_chromeos_version_last_updated(&mut self, v: ::std::vec::Vec<u8>) {
        self.chromeos_version_last_updated = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chromeos_version_last_updated(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.chromeos_version_last_updated
    }

    // Take field
    pub fn take_chromeos_version_last_updated(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.chromeos_version_last_updated, ::std::vec::Vec::new())
    }

    // bytes chrome_version_last_updated = 2;


    pub fn get_chrome_version_last_updated(&self) -> &[u8] {
        &self.chrome_version_last_updated
    }
    pub fn clear_chrome_version_last_updated(&mut self) {
        self.chrome_version_last_updated.clear();
    }

    // Param is passed by value, moved
    pub fn set_chrome_version_last_updated(&mut self, v: ::std::vec::Vec<u8>) {
        self.chrome_version_last_updated = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chrome_version_last_updated(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.chrome_version_last_updated
    }

    // Take field
    pub fn take_chrome_version_last_updated(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.chrome_version_last_updated, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CommonMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.chromeos_version_last_updated)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.chrome_version_last_updated)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.chromeos_version_last_updated.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.chromeos_version_last_updated);
        }
        if !self.chrome_version_last_updated.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.chrome_version_last_updated);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.chromeos_version_last_updated.is_empty() {
            os.write_bytes(1, &self.chromeos_version_last_updated)?;
        }
        if !self.chrome_version_last_updated.is_empty() {
            os.write_bytes(2, &self.chrome_version_last_updated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommonMetadata {
        CommonMetadata::new()
    }

    fn default_instance() -> &'static CommonMetadata {
        static instance: ::protobuf::rt::LazyV2<CommonMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommonMetadata::new)
    }
}

impl ::protobuf::Clear for CommonMetadata {
    fn clear(&mut self) {
        self.chromeos_version_last_updated.clear();
        self.chrome_version_last_updated.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct LegacyFingerprintMetadata {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LegacyFingerprintMetadata {
    fn default() -> &'a LegacyFingerprintMetadata {
        <LegacyFingerprintMetadata as ::protobuf::Message>::default_instance()
    }
}

impl LegacyFingerprintMetadata {
    pub fn new() -> LegacyFingerprintMetadata {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LegacyFingerprintMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LegacyFingerprintMetadata {
        LegacyFingerprintMetadata::new()
    }

    fn default_instance() -> &'static LegacyFingerprintMetadata {
        static instance: ::protobuf::rt::LazyV2<LegacyFingerprintMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LegacyFingerprintMetadata::new)
    }
}

impl ::protobuf::Clear for LegacyFingerprintMetadata {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for LegacyFingerprintMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct AuthFactor {
    // message fields
    pub field_type: AuthFactorType,
    pub label: ::std::string::String,
    pub common_metadata: ::protobuf::SingularPtrField<CommonMetadata>,
    // message oneof groups
    pub metadata: ::std::option::Option<AuthFactor_oneof_metadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthFactor {
    fn default() -> &'a AuthFactor {
        <AuthFactor as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AuthFactor_oneof_metadata {
    password_metadata(PasswordMetadata),
    pin_metadata(PinMetadata),
    cryptohome_recovery_metadata(CryptohomeRecoveryMetadata),
    kiosk_metadata(KioskMetadata),
    smart_card_metadata(SmartCardMetadata),
    legacy_fingerprint_metadata(LegacyFingerprintMetadata),
}

impl AuthFactor {
    pub fn new() -> AuthFactor {
        ::std::default::Default::default()
    }

    // .user_data_auth.AuthFactorType type = 1;


    pub fn get_field_type(&self) -> AuthFactorType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = AuthFactorType::AUTH_FACTOR_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: AuthFactorType) {
        self.field_type = v;
    }

    // string label = 2;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // .user_data_auth.CommonMetadata common_metadata = 9;


    pub fn get_common_metadata(&self) -> &CommonMetadata {
        self.common_metadata.as_ref().unwrap_or_else(|| <CommonMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_metadata(&mut self) {
        self.common_metadata.clear();
    }

    pub fn has_common_metadata(&self) -> bool {
        self.common_metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_metadata(&mut self, v: CommonMetadata) {
        self.common_metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_metadata(&mut self) -> &mut CommonMetadata {
        if self.common_metadata.is_none() {
            self.common_metadata.set_default();
        }
        self.common_metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_metadata(&mut self) -> CommonMetadata {
        self.common_metadata.take().unwrap_or_else(|| CommonMetadata::new())
    }

    // .user_data_auth.PasswordMetadata password_metadata = 4;


    pub fn get_password_metadata(&self) -> &PasswordMetadata {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(ref v)) => v,
            _ => <PasswordMetadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_password_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_password_metadata(&self) -> bool {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_password_metadata(&mut self, v: PasswordMetadata) {
        self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_password_metadata(&mut self) -> &mut PasswordMetadata {
        if let ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(_)) = self.metadata {
        } else {
            self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(PasswordMetadata::new()));
        }
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_password_metadata(&mut self) -> PasswordMetadata {
        if self.has_password_metadata() {
            match self.metadata.take() {
                ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            PasswordMetadata::new()
        }
    }

    // .user_data_auth.PinMetadata pin_metadata = 5;


    pub fn get_pin_metadata(&self) -> &PinMetadata {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(ref v)) => v,
            _ => <PinMetadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_pin_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_pin_metadata(&self) -> bool {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pin_metadata(&mut self, v: PinMetadata) {
        self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pin_metadata(&mut self) -> &mut PinMetadata {
        if let ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(_)) = self.metadata {
        } else {
            self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(PinMetadata::new()));
        }
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pin_metadata(&mut self) -> PinMetadata {
        if self.has_pin_metadata() {
            match self.metadata.take() {
                ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            PinMetadata::new()
        }
    }

    // .user_data_auth.CryptohomeRecoveryMetadata cryptohome_recovery_metadata = 6;


    pub fn get_cryptohome_recovery_metadata(&self) -> &CryptohomeRecoveryMetadata {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(ref v)) => v,
            _ => <CryptohomeRecoveryMetadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cryptohome_recovery_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_cryptohome_recovery_metadata(&self) -> bool {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cryptohome_recovery_metadata(&mut self, v: CryptohomeRecoveryMetadata) {
        self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cryptohome_recovery_metadata(&mut self) -> &mut CryptohomeRecoveryMetadata {
        if let ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(_)) = self.metadata {
        } else {
            self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(CryptohomeRecoveryMetadata::new()));
        }
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cryptohome_recovery_metadata(&mut self) -> CryptohomeRecoveryMetadata {
        if self.has_cryptohome_recovery_metadata() {
            match self.metadata.take() {
                ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            CryptohomeRecoveryMetadata::new()
        }
    }

    // .user_data_auth.KioskMetadata kiosk_metadata = 7;


    pub fn get_kiosk_metadata(&self) -> &KioskMetadata {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(ref v)) => v,
            _ => <KioskMetadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_kiosk_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_kiosk_metadata(&self) -> bool {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_kiosk_metadata(&mut self, v: KioskMetadata) {
        self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_kiosk_metadata(&mut self) -> &mut KioskMetadata {
        if let ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(_)) = self.metadata {
        } else {
            self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(KioskMetadata::new()));
        }
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_kiosk_metadata(&mut self) -> KioskMetadata {
        if self.has_kiosk_metadata() {
            match self.metadata.take() {
                ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            KioskMetadata::new()
        }
    }

    // .user_data_auth.SmartCardMetadata smart_card_metadata = 8;


    pub fn get_smart_card_metadata(&self) -> &SmartCardMetadata {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(ref v)) => v,
            _ => <SmartCardMetadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_smart_card_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_smart_card_metadata(&self) -> bool {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_smart_card_metadata(&mut self, v: SmartCardMetadata) {
        self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_smart_card_metadata(&mut self) -> &mut SmartCardMetadata {
        if let ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(_)) = self.metadata {
        } else {
            self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(SmartCardMetadata::new()));
        }
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_smart_card_metadata(&mut self) -> SmartCardMetadata {
        if self.has_smart_card_metadata() {
            match self.metadata.take() {
                ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            SmartCardMetadata::new()
        }
    }

    // .user_data_auth.LegacyFingerprintMetadata legacy_fingerprint_metadata = 11;


    pub fn get_legacy_fingerprint_metadata(&self) -> &LegacyFingerprintMetadata {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(ref v)) => v,
            _ => <LegacyFingerprintMetadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_legacy_fingerprint_metadata(&mut self) {
        self.metadata = ::std::option::Option::None;
    }

    pub fn has_legacy_fingerprint_metadata(&self) -> bool {
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_legacy_fingerprint_metadata(&mut self, v: LegacyFingerprintMetadata) {
        self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_legacy_fingerprint_metadata(&mut self) -> &mut LegacyFingerprintMetadata {
        if let ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(_)) = self.metadata {
        } else {
            self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(LegacyFingerprintMetadata::new()));
        }
        match self.metadata {
            ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_legacy_fingerprint_metadata(&mut self) -> LegacyFingerprintMetadata {
        if self.has_legacy_fingerprint_metadata() {
            match self.metadata.take() {
                ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            LegacyFingerprintMetadata::new()
        }
    }
}

impl ::protobuf::Message for AuthFactor {
    fn is_initialized(&self) -> bool {
        for v in &self.common_metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(AuthFactor_oneof_metadata::password_metadata(ref v)) = self.metadata {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthFactor_oneof_metadata::pin_metadata(ref v)) = self.metadata {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(ref v)) = self.metadata {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthFactor_oneof_metadata::kiosk_metadata(ref v)) = self.metadata {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthFactor_oneof_metadata::smart_card_metadata(ref v)) = self.metadata {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(ref v)) = self.metadata {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_metadata)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::password_metadata(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::pin_metadata(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::cryptohome_recovery_metadata(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::kiosk_metadata(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::smart_card_metadata(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.metadata = ::std::option::Option::Some(AuthFactor_oneof_metadata::legacy_fingerprint_metadata(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != AuthFactorType::AUTH_FACTOR_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if let Some(ref v) = self.common_metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.metadata {
            match v {
                &AuthFactor_oneof_metadata::password_metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthFactor_oneof_metadata::pin_metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthFactor_oneof_metadata::cryptohome_recovery_metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthFactor_oneof_metadata::kiosk_metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthFactor_oneof_metadata::smart_card_metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AuthFactor_oneof_metadata::legacy_fingerprint_metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != AuthFactorType::AUTH_FACTOR_TYPE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if let Some(ref v) = self.common_metadata.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.metadata {
            match v {
                &AuthFactor_oneof_metadata::password_metadata(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthFactor_oneof_metadata::pin_metadata(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthFactor_oneof_metadata::cryptohome_recovery_metadata(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthFactor_oneof_metadata::kiosk_metadata(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthFactor_oneof_metadata::smart_card_metadata(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AuthFactor_oneof_metadata::legacy_fingerprint_metadata(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthFactor {
        AuthFactor::new()
    }

    fn default_instance() -> &'static AuthFactor {
        static instance: ::protobuf::rt::LazyV2<AuthFactor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthFactor::new)
    }
}

impl ::protobuf::Clear for AuthFactor {
    fn clear(&mut self) {
        self.field_type = AuthFactorType::AUTH_FACTOR_TYPE_UNSPECIFIED;
        self.label.clear();
        self.common_metadata.clear();
        self.metadata = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.metadata = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthFactor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AuthFactorType {
    AUTH_FACTOR_TYPE_UNSPECIFIED = 0,
    AUTH_FACTOR_TYPE_PASSWORD = 1,
    AUTH_FACTOR_TYPE_PIN = 2,
    AUTH_FACTOR_TYPE_CRYPTOHOME_RECOVERY = 3,
    AUTH_FACTOR_TYPE_KIOSK = 4,
    AUTH_FACTOR_TYPE_SMART_CARD = 5,
    AUTH_FACTOR_TYPE_LEGACY_FINGERPRINT = 6,
}

impl ::protobuf::ProtobufEnum for AuthFactorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AuthFactorType> {
        match value {
            0 => ::std::option::Option::Some(AuthFactorType::AUTH_FACTOR_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(AuthFactorType::AUTH_FACTOR_TYPE_PASSWORD),
            2 => ::std::option::Option::Some(AuthFactorType::AUTH_FACTOR_TYPE_PIN),
            3 => ::std::option::Option::Some(AuthFactorType::AUTH_FACTOR_TYPE_CRYPTOHOME_RECOVERY),
            4 => ::std::option::Option::Some(AuthFactorType::AUTH_FACTOR_TYPE_KIOSK),
            5 => ::std::option::Option::Some(AuthFactorType::AUTH_FACTOR_TYPE_SMART_CARD),
            6 => ::std::option::Option::Some(AuthFactorType::AUTH_FACTOR_TYPE_LEGACY_FINGERPRINT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AuthFactorType] = &[
            AuthFactorType::AUTH_FACTOR_TYPE_UNSPECIFIED,
            AuthFactorType::AUTH_FACTOR_TYPE_PASSWORD,
            AuthFactorType::AUTH_FACTOR_TYPE_PIN,
            AuthFactorType::AUTH_FACTOR_TYPE_CRYPTOHOME_RECOVERY,
            AuthFactorType::AUTH_FACTOR_TYPE_KIOSK,
            AuthFactorType::AUTH_FACTOR_TYPE_SMART_CARD,
            AuthFactorType::AUTH_FACTOR_TYPE_LEGACY_FINGERPRINT,
        ];
        values
    }
}

impl ::std::marker::Copy for AuthFactorType {
}

impl ::std::default::Default for AuthFactorType {
    fn default() -> Self {
        AuthFactorType::AUTH_FACTOR_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthFactorType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AuthFactorPreparePurpose {
    PURPOSE_UNSPECIFIED = 0,
    PURPOSE_ADD_AUTH_FACTOR = 1,
    PURPOSE_AUTHENTICATE_AUTH_FACTOR = 2,
}

impl ::protobuf::ProtobufEnum for AuthFactorPreparePurpose {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AuthFactorPreparePurpose> {
        match value {
            0 => ::std::option::Option::Some(AuthFactorPreparePurpose::PURPOSE_UNSPECIFIED),
            1 => ::std::option::Option::Some(AuthFactorPreparePurpose::PURPOSE_ADD_AUTH_FACTOR),
            2 => ::std::option::Option::Some(AuthFactorPreparePurpose::PURPOSE_AUTHENTICATE_AUTH_FACTOR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AuthFactorPreparePurpose] = &[
            AuthFactorPreparePurpose::PURPOSE_UNSPECIFIED,
            AuthFactorPreparePurpose::PURPOSE_ADD_AUTH_FACTOR,
            AuthFactorPreparePurpose::PURPOSE_AUTHENTICATE_AUTH_FACTOR,
        ];
        values
    }
}

impl ::std::marker::Copy for AuthFactorPreparePurpose {
}

impl ::std::default::Default for AuthFactorPreparePurpose {
    fn default() -> Self {
        AuthFactorPreparePurpose::PURPOSE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthFactorPreparePurpose {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SmartCardSignatureAlgorithm {
    CHALLENGE_NOT_SPECIFIED = 0,
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA1 = 1,
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA256 = 2,
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA384 = 3,
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA512 = 4,
}

impl ::protobuf::ProtobufEnum for SmartCardSignatureAlgorithm {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SmartCardSignatureAlgorithm> {
        match value {
            0 => ::std::option::Option::Some(SmartCardSignatureAlgorithm::CHALLENGE_NOT_SPECIFIED),
            1 => ::std::option::Option::Some(SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1),
            2 => ::std::option::Option::Some(SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA256),
            3 => ::std::option::Option::Some(SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA384),
            4 => ::std::option::Option::Some(SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA512),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SmartCardSignatureAlgorithm] = &[
            SmartCardSignatureAlgorithm::CHALLENGE_NOT_SPECIFIED,
            SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1,
            SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA256,
            SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA384,
            SmartCardSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA512,
        ];
        values
    }
}

impl ::std::marker::Copy for SmartCardSignatureAlgorithm {
}

impl ::std::default::Default for SmartCardSignatureAlgorithm {
    fn default() -> Self {
        SmartCardSignatureAlgorithm::CHALLENGE_NOT_SPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for SmartCardSignatureAlgorithm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AuthIntent {
    AUTH_INTENT_UNSPECIFIED = 0,
    AUTH_INTENT_DECRYPT = 1,
    AUTH_INTENT_VERIFY_ONLY = 2,
}

impl ::protobuf::ProtobufEnum for AuthIntent {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AuthIntent> {
        match value {
            0 => ::std::option::Option::Some(AuthIntent::AUTH_INTENT_UNSPECIFIED),
            1 => ::std::option::Option::Some(AuthIntent::AUTH_INTENT_DECRYPT),
            2 => ::std::option::Option::Some(AuthIntent::AUTH_INTENT_VERIFY_ONLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AuthIntent] = &[
            AuthIntent::AUTH_INTENT_UNSPECIFIED,
            AuthIntent::AUTH_INTENT_DECRYPT,
            AuthIntent::AUTH_INTENT_VERIFY_ONLY,
        ];
        values
    }
}

impl ::std::marker::Copy for AuthIntent {
}

impl ::std::default::Default for AuthIntent {
    fn default() -> Self {
        AuthIntent::AUTH_INTENT_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthIntent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
