/* automatically generated by tools/bindgen-all-the-things */

#![allow(clippy::missing_safety_doc)]
#![allow(clippy::undocumented_unsafe_blocks)]
#![allow(clippy::upper_case_acronyms)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

pub const GH_IOCTL_TYPE: u8 = 71u8;
pub const GH_MEM_ALLOW_READ: u32 = 1;
pub const GH_MEM_ALLOW_WRITE: u32 = 2;
pub const GH_MEM_ALLOW_EXEC: u32 = 4;
pub const GH_FN_VCPU: u32 = 1;
pub const GH_FN_IRQFD: u32 = 2;
pub const GH_FN_IOEVENTFD: u32 = 3;
pub const GH_FN_MAX_ARG_SIZE: u32 = 256;
pub const GH_IRQFD_LEVEL: u32 = 1;
pub const GH_IOEVENTFD_DATAMATCH: u32 = 1;
pub const GH_VM_MAX_EXIT_REASON_SIZE: u32 = 8;
pub const GH_VCPU_EXIT_UNKNOWN: u32 = 0;
pub const GH_VCPU_EXIT_MMIO: u32 = 1;
pub const GH_VCPU_EXIT_STATUS: u32 = 2;
pub const GH_ANDROID_IOCTL_TYPE: u8 = 65u8;
pub const GH_VM_BOOT_CONTEXT_REG_SHIFT: u32 = 8;
pub type i8 = :: std :: os :: raw :: c_schar;
pub type u8 = :: std :: os :: raw :: c_uchar;
pub type i16 = :: std :: os :: raw :: c_short;
pub type u16 = :: std :: os :: raw :: c_ushort;
pub type i32 = :: std :: os :: raw :: c_int;
pub type u32 = :: std :: os :: raw :: c_uint;
pub type i64 = :: std :: os :: raw :: c_longlong;
pub type u64 = :: std :: os :: raw :: c_ulonglong;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = u16;
pub type __be16 = u16;
pub type __le32 = u32;
pub type __be32 = u32;
pub type __le64 = u64;
pub type __be64 = u64;
pub type __sum16 = u16;
pub type __wsum = u32;
pub type __poll_t = :: std :: os :: raw :: c_uint;
pub const gunyah_auth_type_GUNYAH_ANDROID_PVM_TYPE : gunyah_auth_type = 0;
pub const gunyah_auth_type_GUNYAH_QCOM_TRUSTED_VM_TYPE : gunyah_auth_type = 1;
pub type gunyah_auth_type = :: std :: os :: raw :: c_uint;
#[repr (C)]
#[derive (Debug , Default , Copy , Clone)]
pub struct gunyah_qtvm_auth_arg {
    pub vm_id : u16,
    pub pas_id : u32,
    pub guest_phys_addr : u64,
    pub size : u64,
}
#[repr (C)]
#[derive (Debug , Default , Copy , Clone)]
pub struct gunyah_auth_desc {
    pub type_ : u32,
    pub arg_size : u32,
    pub arg : u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_userspace_memory_region {
    pub label: u32,
    pub flags: u32,
    pub guest_phys_addr: u64,
    pub memory_size: u64,
    pub userspace_addr: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vm_dtb_config {
    pub guest_phys_addr: u64,
    pub size: u64,
}
pub mod gh_vm_boot_context_reg {
    pub type Type = ::std::os::raw::c_uint;
    pub const REG_SET_X: Type = 0;
    pub const REG_SET_PC: Type = 1;
    pub const REG_SET_SP: Type = 2;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vm_boot_context {
    pub reg: u32,
    pub reserved: u32,
    pub value: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_vcpu_arg {
    pub id: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_irqfd_arg {
    pub fd: u32,
    pub label: u32,
    pub flags: u32,
    pub padding: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_ioeventfd_arg {
    pub datamatch: u64,
    pub addr: u64,
    pub len: u32,
    pub fd: i32,
    pub flags: u32,
    pub padding: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_fn_desc {
    pub type_: u32,
    pub arg_size: u32,
    pub arg: u64,
}
pub const GH_VM_STATUS_GH_VM_STATUS_LOAD_FAILED: gh_vm_status = 1;
pub const GH_VM_STATUS_GH_VM_STATUS_EXITED: gh_vm_status = 2;
pub const GH_VM_STATUS_GH_VM_STATUS_CRASHED: gh_vm_status = 3;
pub type gh_vm_status = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vm_exit_info {
    pub type_: u16,
    pub padding: u16,
    pub reason_size: u32,
    pub reason: [u8; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gh_vcpu_run {
    pub immediate_exit: u8,
    pub padding: [u8; 7usize],
    pub exit_reason: u32,
    pub __bindgen_anon_1: gh_vcpu_run__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gh_vcpu_run__bindgen_ty_1 {
    pub mmio: gh_vcpu_run__bindgen_ty_1__bindgen_ty_1,
    pub status: gh_vcpu_run__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vcpu_run__bindgen_ty_1__bindgen_ty_1 {
    pub phys_addr: u64,
    pub data: [u8; 8usize],
    pub len: u32,
    pub is_write: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gh_vcpu_run__bindgen_ty_1__bindgen_ty_2 {
    pub status: gh_vm_status,
    pub exit_info: gh_vm_exit_info,
}
impl Default for gh_vcpu_run__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for gh_vcpu_run__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for gh_vcpu_run {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gh_vm_firmware_config {
    pub guest_phys_addr: u64,
    pub size: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gunyah_address_range {
    pub guest_phys_addr: u64,
    pub size: u64,
}
pub const GUNYAH_MEM_ALLOW_READ : gunyah_map_flags = 1 ;
pub const GUNYAH_MEM_ALLOW_WRITE : gunyah_map_flags = 2 ;
pub const GUNYAH_MEM_ALLOW_EXEC : gunyah_map_flags = 4 ;
pub const GUNYAH_MEM_ALLOW_RWX : gunyah_map_flags = 7 ;
pub const GUNYAH_MEM_DEFAULT_ACCESS : gunyah_map_flags = 0 ;
pub const GUNYAH_MEM_FORCE_LEND : gunyah_map_flags = 16 ;
pub const GUNYAH_MEM_FORCE_SHARE : gunyah_map_flags = 32 ;
pub const GUNYAH_MEM_UNMAP : gunyah_map_flags = 256 ;
pub type gunyah_map_flags = :: std :: os :: raw :: c_uint ;
#[repr (C)]
#[derive (Debug , Default , Copy , Clone)]
pub struct gunyah_map_cma_mem_args {
    pub label: u32,
    pub guest_addr : u64,
    pub flags : u32,
    pub guest_mem_fd : u32,
    pub offset : u64,
    pub size : u64,
}
