// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.9
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `key.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.KeyPrivileges)
pub struct KeyPrivileges {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.KeyPrivileges.add)
    pub add: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:cryptohome.KeyPrivileges.remove)
    pub remove: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:cryptohome.KeyPrivileges.update)
    pub update: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.KeyPrivileges.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyPrivileges {
    fn default() -> &'a KeyPrivileges {
        <KeyPrivileges as ::protobuf::Message>::default_instance()
    }
}

impl KeyPrivileges {
    pub fn new() -> KeyPrivileges {
        ::std::default::Default::default()
    }

    // optional bool add = 2;

    pub fn add(&self) -> bool {
        self.add.unwrap_or(true)
    }

    pub fn clear_add(&mut self) {
        self.add = ::std::option::Option::None;
    }

    pub fn has_add(&self) -> bool {
        self.add.is_some()
    }

    // Param is passed by value, moved
    pub fn set_add(&mut self, v: bool) {
        self.add = ::std::option::Option::Some(v);
    }

    // optional bool remove = 3;

    pub fn remove(&self) -> bool {
        self.remove.unwrap_or(true)
    }

    pub fn clear_remove(&mut self) {
        self.remove = ::std::option::Option::None;
    }

    pub fn has_remove(&self) -> bool {
        self.remove.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remove(&mut self, v: bool) {
        self.remove = ::std::option::Option::Some(v);
    }

    // optional bool update = 4;

    pub fn update(&self) -> bool {
        self.update.unwrap_or(true)
    }

    pub fn clear_update(&mut self) {
        self.update = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        self.update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: bool) {
        self.update = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for KeyPrivileges {
    const NAME: &'static str = "KeyPrivileges";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.add = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.remove = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.update = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.add {
            my_size += 1 + 1;
        }
        if let Some(v) = self.remove {
            my_size += 1 + 1;
        }
        if let Some(v) = self.update {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.add {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.remove {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.update {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyPrivileges {
        KeyPrivileges::new()
    }

    fn clear(&mut self) {
        self.add = ::std::option::Option::None;
        self.remove = ::std::option::Option::None;
        self.update = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyPrivileges {
        static instance: KeyPrivileges = KeyPrivileges {
            add: ::std::option::Option::None,
            remove: ::std::option::Option::None,
            update: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.KeyProviderData)
pub struct KeyProviderData {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.KeyProviderData.entry)
    pub entry: ::std::vec::Vec<key_provider_data::Entry>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.KeyProviderData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyProviderData {
    fn default() -> &'a KeyProviderData {
        <KeyProviderData as ::protobuf::Message>::default_instance()
    }
}

impl KeyProviderData {
    pub fn new() -> KeyProviderData {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for KeyProviderData {
    const NAME: &'static str = "KeyProviderData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entry.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entry {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entry {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyProviderData {
        KeyProviderData::new()
    }

    fn clear(&mut self) {
        self.entry.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyProviderData {
        static instance: KeyProviderData = KeyProviderData {
            entry: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `KeyProviderData`
pub mod key_provider_data {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:cryptohome.KeyProviderData.Entry)
    pub struct Entry {
        // message fields
        // @@protoc_insertion_point(field:cryptohome.KeyProviderData.Entry.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:cryptohome.KeyProviderData.Entry.number)
        pub number: ::std::option::Option<i64>,
        // @@protoc_insertion_point(field:cryptohome.KeyProviderData.Entry.bytes)
        pub bytes: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:cryptohome.KeyProviderData.Entry.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Entry {
        fn default() -> &'a Entry {
            <Entry as ::protobuf::Message>::default_instance()
        }
    }

    impl Entry {
        pub fn new() -> Entry {
            ::std::default::Default::default()
        }

        // optional string name = 1;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional int64 number = 2;

        pub fn number(&self) -> i64 {
            self.number.unwrap_or(0)
        }

        pub fn clear_number(&mut self) {
            self.number = ::std::option::Option::None;
        }

        pub fn has_number(&self) -> bool {
            self.number.is_some()
        }

        // Param is passed by value, moved
        pub fn set_number(&mut self, v: i64) {
            self.number = ::std::option::Option::Some(v);
        }

        // optional bytes bytes = 3;

        pub fn bytes(&self) -> &[u8] {
            match self.bytes.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_bytes(&mut self) {
            self.bytes = ::std::option::Option::None;
        }

        pub fn has_bytes(&self) -> bool {
            self.bytes.is_some()
        }

        // Param is passed by value, moved
        pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
            self.bytes = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.bytes.is_none() {
                self.bytes = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.bytes.as_mut().unwrap()
        }

        // Take field
        pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
            self.bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::protobuf::Message for Entry {
        const NAME: &'static str = "Entry";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    10 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    16 => {
                        self.number = ::std::option::Option::Some(is.read_int64()?);
                    },
                    26 => {
                        self.bytes = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(1, &v);
            }
            if let Some(v) = self.number {
                my_size += ::protobuf::rt::int64_size(2, v);
            }
            if let Some(v) = self.bytes.as_ref() {
                my_size += ::protobuf::rt::bytes_size(3, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.name.as_ref() {
                os.write_string(1, v)?;
            }
            if let Some(v) = self.number {
                os.write_int64(2, v)?;
            }
            if let Some(v) = self.bytes.as_ref() {
                os.write_bytes(3, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Entry {
            Entry::new()
        }

        fn clear(&mut self) {
            self.name = ::std::option::Option::None;
            self.number = ::std::option::Option::None;
            self.bytes = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Entry {
            static instance: Entry = Entry {
                name: ::std::option::Option::None,
                number: ::std::option::Option::None,
                bytes: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.ChallengePublicKeyInfo)
pub struct ChallengePublicKeyInfo {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.ChallengePublicKeyInfo.public_key_spki_der)
    pub public_key_spki_der: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:cryptohome.ChallengePublicKeyInfo.signature_algorithm)
    pub signature_algorithm: ::std::vec::Vec<::protobuf::EnumOrUnknown<ChallengeSignatureAlgorithm>>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.ChallengePublicKeyInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChallengePublicKeyInfo {
    fn default() -> &'a ChallengePublicKeyInfo {
        <ChallengePublicKeyInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChallengePublicKeyInfo {
    pub fn new() -> ChallengePublicKeyInfo {
        ::std::default::Default::default()
    }

    // optional bytes public_key_spki_der = 1;

    pub fn public_key_spki_der(&self) -> &[u8] {
        match self.public_key_spki_der.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key_spki_der(&mut self) {
        self.public_key_spki_der = ::std::option::Option::None;
    }

    pub fn has_public_key_spki_der(&self) -> bool {
        self.public_key_spki_der.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key_spki_der(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key_spki_der = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key_spki_der(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key_spki_der.is_none() {
            self.public_key_spki_der = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key_spki_der.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key_spki_der(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key_spki_der.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ChallengePublicKeyInfo {
    const NAME: &'static str = "ChallengePublicKeyInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.public_key_spki_der = ::std::option::Option::Some(is.read_bytes()?);
                },
                16 => {
                    self.signature_algorithm.push(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.signature_algorithm)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.public_key_spki_der.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        for value in &self.signature_algorithm {
            my_size += ::protobuf::rt::int32_size(2, value.value());
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.public_key_spki_der.as_ref() {
            os.write_bytes(1, v)?;
        }
        for v in &self.signature_algorithm {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChallengePublicKeyInfo {
        ChallengePublicKeyInfo::new()
    }

    fn clear(&mut self) {
        self.public_key_spki_der = ::std::option::Option::None;
        self.signature_algorithm.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChallengePublicKeyInfo {
        static instance: ChallengePublicKeyInfo = ChallengePublicKeyInfo {
            public_key_spki_der: ::std::option::Option::None,
            signature_algorithm: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.KeyPolicy)
pub struct KeyPolicy {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.KeyPolicy.low_entropy_credential)
    pub low_entropy_credential: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:cryptohome.KeyPolicy.auth_locked)
    pub auth_locked: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.KeyPolicy.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyPolicy {
    fn default() -> &'a KeyPolicy {
        <KeyPolicy as ::protobuf::Message>::default_instance()
    }
}

impl KeyPolicy {
    pub fn new() -> KeyPolicy {
        ::std::default::Default::default()
    }

    // optional bool low_entropy_credential = 1;

    pub fn low_entropy_credential(&self) -> bool {
        self.low_entropy_credential.unwrap_or(false)
    }

    pub fn clear_low_entropy_credential(&mut self) {
        self.low_entropy_credential = ::std::option::Option::None;
    }

    pub fn has_low_entropy_credential(&self) -> bool {
        self.low_entropy_credential.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_entropy_credential(&mut self, v: bool) {
        self.low_entropy_credential = ::std::option::Option::Some(v);
    }

    // optional bool auth_locked = 2;

    pub fn auth_locked(&self) -> bool {
        self.auth_locked.unwrap_or(false)
    }

    pub fn clear_auth_locked(&mut self) {
        self.auth_locked = ::std::option::Option::None;
    }

    pub fn has_auth_locked(&self) -> bool {
        self.auth_locked.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_locked(&mut self, v: bool) {
        self.auth_locked = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for KeyPolicy {
    const NAME: &'static str = "KeyPolicy";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.low_entropy_credential = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.auth_locked = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.low_entropy_credential {
            my_size += 1 + 1;
        }
        if let Some(v) = self.auth_locked {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.low_entropy_credential {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.auth_locked {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyPolicy {
        KeyPolicy::new()
    }

    fn clear(&mut self) {
        self.low_entropy_credential = ::std::option::Option::None;
        self.auth_locked = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyPolicy {
        static instance: KeyPolicy = KeyPolicy {
            low_entropy_credential: ::std::option::Option::None,
            auth_locked: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.KeyData)
pub struct KeyData {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.KeyData.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<key_data::KeyType>>,
    // @@protoc_insertion_point(field:cryptohome.KeyData.label)
    pub label: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:cryptohome.KeyData.privileges)
    pub privileges: ::protobuf::MessageField<KeyPrivileges>,
    // @@protoc_insertion_point(field:cryptohome.KeyData.revision)
    pub revision: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:cryptohome.KeyData.provider_data)
    pub provider_data: ::protobuf::MessageField<KeyProviderData>,
    // @@protoc_insertion_point(field:cryptohome.KeyData.challenge_response_key)
    pub challenge_response_key: ::std::vec::Vec<ChallengePublicKeyInfo>,
    // @@protoc_insertion_point(field:cryptohome.KeyData.policy)
    pub policy: ::protobuf::MessageField<KeyPolicy>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.KeyData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyData {
    fn default() -> &'a KeyData {
        <KeyData as ::protobuf::Message>::default_instance()
    }
}

impl KeyData {
    pub fn new() -> KeyData {
        ::std::default::Default::default()
    }

    // optional .cryptohome.KeyData.KeyType type = 1;

    pub fn type_(&self) -> key_data::KeyType {
        match self.type_ {
            Some(e) => e.enum_value_or(key_data::KeyType::KEY_TYPE_PASSWORD),
            None => key_data::KeyType::KEY_TYPE_PASSWORD,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: key_data::KeyType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional string label = 2;

    pub fn label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_label(&mut self) {
        self.label = ::std::option::Option::None;
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label = ::std::option::Option::Some(::std::string::String::new());
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 revision = 4;

    pub fn revision(&self) -> i64 {
        self.revision.unwrap_or(0)
    }

    pub fn clear_revision(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: i64) {
        self.revision = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for KeyData {
    const NAME: &'static str = "KeyData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.label = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.privileges)?;
                },
                32 => {
                    self.revision = ::std::option::Option::Some(is.read_int64()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.provider_data)?;
                },
                58 => {
                    self.challenge_response_key.push(is.read_message()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.policy)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.label.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.privileges.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.revision {
            my_size += ::protobuf::rt::int64_size(4, v);
        }
        if let Some(v) = self.provider_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.challenge_response_key {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.label.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.privileges.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.revision {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.provider_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.challenge_response_key {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        };
        if let Some(v) = self.policy.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyData {
        KeyData::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.label = ::std::option::Option::None;
        self.privileges.clear();
        self.revision = ::std::option::Option::None;
        self.provider_data.clear();
        self.challenge_response_key.clear();
        self.policy.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyData {
        static instance: KeyData = KeyData {
            type_: ::std::option::Option::None,
            label: ::std::option::Option::None,
            privileges: ::protobuf::MessageField::none(),
            revision: ::std::option::Option::None,
            provider_data: ::protobuf::MessageField::none(),
            challenge_response_key: ::std::vec::Vec::new(),
            policy: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `KeyData`
pub mod key_data {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:cryptohome.KeyData.KeyType)
    pub enum KeyType {
        // @@protoc_insertion_point(enum_value:cryptohome.KeyData.KeyType.KEY_TYPE_PASSWORD)
        KEY_TYPE_PASSWORD = 0,
        // @@protoc_insertion_point(enum_value:cryptohome.KeyData.KeyType.KEY_TYPE_CHALLENGE_RESPONSE)
        KEY_TYPE_CHALLENGE_RESPONSE = 1,
        // @@protoc_insertion_point(enum_value:cryptohome.KeyData.KeyType.KEY_TYPE_FINGERPRINT)
        KEY_TYPE_FINGERPRINT = 2,
        // @@protoc_insertion_point(enum_value:cryptohome.KeyData.KeyType.KEY_TYPE_KIOSK)
        KEY_TYPE_KIOSK = 3,
    }

    impl ::protobuf::Enum for KeyType {
        const NAME: &'static str = "KeyType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<KeyType> {
            match value {
                0 => ::std::option::Option::Some(KeyType::KEY_TYPE_PASSWORD),
                1 => ::std::option::Option::Some(KeyType::KEY_TYPE_CHALLENGE_RESPONSE),
                2 => ::std::option::Option::Some(KeyType::KEY_TYPE_FINGERPRINT),
                3 => ::std::option::Option::Some(KeyType::KEY_TYPE_KIOSK),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [KeyType] = &[
            KeyType::KEY_TYPE_PASSWORD,
            KeyType::KEY_TYPE_CHALLENGE_RESPONSE,
            KeyType::KEY_TYPE_FINGERPRINT,
            KeyType::KEY_TYPE_KIOSK,
        ];
    }

    impl ::std::default::Default for KeyType {
        fn default() -> Self {
            KeyType::KEY_TYPE_PASSWORD
        }
    }

}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.Key)
pub struct Key {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.Key.data)
    pub data: ::protobuf::MessageField<KeyData>,
    // @@protoc_insertion_point(field:cryptohome.Key.secret)
    pub secret: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.Key.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Key {
    fn default() -> &'a Key {
        <Key as ::protobuf::Message>::default_instance()
    }
}

impl Key {
    pub fn new() -> Key {
        ::std::default::Default::default()
    }

    // optional bytes secret = 2;

    pub fn secret(&self) -> &[u8] {
        match self.secret.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_secret(&mut self) {
        self.secret = ::std::option::Option::None;
    }

    pub fn has_secret(&self) -> bool {
        self.secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::vec::Vec<u8>) {
        self.secret = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.secret.is_none() {
            self.secret = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::vec::Vec<u8> {
        self.secret.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Key {
    const NAME: &'static str = "Key";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                18 => {
                    self.secret = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.secret.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.secret.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Key {
        Key::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.secret = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Key {
        static instance: Key = Key {
            data: ::protobuf::MessageField::none(),
            secret: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cryptohome.ChallengeSignatureAlgorithm)
pub enum ChallengeSignatureAlgorithm {
    // @@protoc_insertion_point(enum_value:cryptohome.ChallengeSignatureAlgorithm.CHALLENGE_RSASSA_PKCS1_V1_5_SHA1)
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA1 = 1,
    // @@protoc_insertion_point(enum_value:cryptohome.ChallengeSignatureAlgorithm.CHALLENGE_RSASSA_PKCS1_V1_5_SHA256)
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA256 = 2,
    // @@protoc_insertion_point(enum_value:cryptohome.ChallengeSignatureAlgorithm.CHALLENGE_RSASSA_PKCS1_V1_5_SHA384)
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA384 = 3,
    // @@protoc_insertion_point(enum_value:cryptohome.ChallengeSignatureAlgorithm.CHALLENGE_RSASSA_PKCS1_V1_5_SHA512)
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA512 = 4,
}

impl ::protobuf::Enum for ChallengeSignatureAlgorithm {
    const NAME: &'static str = "ChallengeSignatureAlgorithm";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChallengeSignatureAlgorithm> {
        match value {
            1 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1),
            2 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA256),
            3 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA384),
            4 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA512),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ChallengeSignatureAlgorithm] = &[
        ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1,
        ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA256,
        ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA384,
        ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA512,
    ];
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ChallengeSignatureAlgorithm {
    fn default() -> Self {
        ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1
    }
}

