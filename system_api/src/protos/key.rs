// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `key.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyPrivileges {
    // message fields
    add: ::std::option::Option<bool>,
    remove: ::std::option::Option<bool>,
    update: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyPrivileges {
    fn default() -> &'a KeyPrivileges {
        <KeyPrivileges as ::protobuf::Message>::default_instance()
    }
}

impl KeyPrivileges {
    pub fn new() -> KeyPrivileges {
        ::std::default::Default::default()
    }

    // optional bool add = 2;


    pub fn get_add(&self) -> bool {
        self.add.unwrap_or(true)
    }
    pub fn clear_add(&mut self) {
        self.add = ::std::option::Option::None;
    }

    pub fn has_add(&self) -> bool {
        self.add.is_some()
    }

    // Param is passed by value, moved
    pub fn set_add(&mut self, v: bool) {
        self.add = ::std::option::Option::Some(v);
    }

    // optional bool remove = 3;


    pub fn get_remove(&self) -> bool {
        self.remove.unwrap_or(true)
    }
    pub fn clear_remove(&mut self) {
        self.remove = ::std::option::Option::None;
    }

    pub fn has_remove(&self) -> bool {
        self.remove.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remove(&mut self, v: bool) {
        self.remove = ::std::option::Option::Some(v);
    }

    // optional bool update = 4;


    pub fn get_update(&self) -> bool {
        self.update.unwrap_or(true)
    }
    pub fn clear_update(&mut self) {
        self.update = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        self.update.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: bool) {
        self.update = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for KeyPrivileges {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.add = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.remove = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.update = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.add {
            my_size += 2;
        }
        if let Some(v) = self.remove {
            my_size += 2;
        }
        if let Some(v) = self.update {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.add {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.remove {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.update {
            os.write_bool(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyPrivileges {
        KeyPrivileges::new()
    }

    fn default_instance() -> &'static KeyPrivileges {
        static instance: ::protobuf::rt::LazyV2<KeyPrivileges> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyPrivileges::new)
    }
}

impl ::protobuf::Clear for KeyPrivileges {
    fn clear(&mut self) {
        self.add = ::std::option::Option::None;
        self.remove = ::std::option::Option::None;
        self.update = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyPrivileges {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyProviderData {
    // message fields
    pub entry: ::protobuf::RepeatedField<KeyProviderData_Entry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyProviderData {
    fn default() -> &'a KeyProviderData {
        <KeyProviderData as ::protobuf::Message>::default_instance()
    }
}

impl KeyProviderData {
    pub fn new() -> KeyProviderData {
        ::std::default::Default::default()
    }

    // repeated .cryptohome.KeyProviderData.Entry entry = 1;


    pub fn get_entry(&self) -> &[KeyProviderData_Entry] {
        &self.entry
    }
    pub fn clear_entry(&mut self) {
        self.entry.clear();
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: ::protobuf::RepeatedField<KeyProviderData_Entry>) {
        self.entry = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entry(&mut self) -> &mut ::protobuf::RepeatedField<KeyProviderData_Entry> {
        &mut self.entry
    }

    // Take field
    pub fn take_entry(&mut self) -> ::protobuf::RepeatedField<KeyProviderData_Entry> {
        ::std::mem::replace(&mut self.entry, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for KeyProviderData {
    fn is_initialized(&self) -> bool {
        for v in &self.entry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entry {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entry {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyProviderData {
        KeyProviderData::new()
    }

    fn default_instance() -> &'static KeyProviderData {
        static instance: ::protobuf::rt::LazyV2<KeyProviderData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyProviderData::new)
    }
}

impl ::protobuf::Clear for KeyProviderData {
    fn clear(&mut self) {
        self.entry.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyProviderData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyProviderData_Entry {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    number: ::std::option::Option<i64>,
    bytes: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyProviderData_Entry {
    fn default() -> &'a KeyProviderData_Entry {
        <KeyProviderData_Entry as ::protobuf::Message>::default_instance()
    }
}

impl KeyProviderData_Entry {
    pub fn new() -> KeyProviderData_Entry {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int64 number = 2;


    pub fn get_number(&self) -> i64 {
        self.number.unwrap_or(0)
    }
    pub fn clear_number(&mut self) {
        self.number = ::std::option::Option::None;
    }

    pub fn has_number(&self) -> bool {
        self.number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: i64) {
        self.number = ::std::option::Option::Some(v);
    }

    // optional bytes bytes = 3;


    pub fn get_bytes(&self) -> &[u8] {
        match self.bytes.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_bytes(&mut self) {
        self.bytes.clear();
    }

    pub fn has_bytes(&self) -> bool {
        self.bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.bytes.is_none() {
            self.bytes.set_default();
        }
        self.bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for KeyProviderData_Entry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.number = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.number {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.number {
            os.write_int64(2, v)?;
        }
        if let Some(ref v) = self.bytes.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyProviderData_Entry {
        KeyProviderData_Entry::new()
    }

    fn default_instance() -> &'static KeyProviderData_Entry {
        static instance: ::protobuf::rt::LazyV2<KeyProviderData_Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyProviderData_Entry::new)
    }
}

impl ::protobuf::Clear for KeyProviderData_Entry {
    fn clear(&mut self) {
        self.name.clear();
        self.number = ::std::option::Option::None;
        self.bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyProviderData_Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChallengePublicKeyInfo {
    // message fields
    public_key_spki_der: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub signature_algorithm: ::std::vec::Vec<ChallengeSignatureAlgorithm>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChallengePublicKeyInfo {
    fn default() -> &'a ChallengePublicKeyInfo {
        <ChallengePublicKeyInfo as ::protobuf::Message>::default_instance()
    }
}

impl ChallengePublicKeyInfo {
    pub fn new() -> ChallengePublicKeyInfo {
        ::std::default::Default::default()
    }

    // optional bytes public_key_spki_der = 1;


    pub fn get_public_key_spki_der(&self) -> &[u8] {
        match self.public_key_spki_der.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key_spki_der(&mut self) {
        self.public_key_spki_der.clear();
    }

    pub fn has_public_key_spki_der(&self) -> bool {
        self.public_key_spki_der.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key_spki_der(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key_spki_der = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key_spki_der(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key_spki_der.is_none() {
            self.public_key_spki_der.set_default();
        }
        self.public_key_spki_der.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key_spki_der(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key_spki_der.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated .cryptohome.ChallengeSignatureAlgorithm signature_algorithm = 2;


    pub fn get_signature_algorithm(&self) -> &[ChallengeSignatureAlgorithm] {
        &self.signature_algorithm
    }
    pub fn clear_signature_algorithm(&mut self) {
        self.signature_algorithm.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature_algorithm(&mut self, v: ::std::vec::Vec<ChallengeSignatureAlgorithm>) {
        self.signature_algorithm = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signature_algorithm(&mut self) -> &mut ::std::vec::Vec<ChallengeSignatureAlgorithm> {
        &mut self.signature_algorithm
    }

    // Take field
    pub fn take_signature_algorithm(&mut self) -> ::std::vec::Vec<ChallengeSignatureAlgorithm> {
        ::std::mem::replace(&mut self.signature_algorithm, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ChallengePublicKeyInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key_spki_der)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.signature_algorithm, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key_spki_der.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        for value in &self.signature_algorithm {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key_spki_der.as_ref() {
            os.write_bytes(1, &v)?;
        }
        for v in &self.signature_algorithm {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChallengePublicKeyInfo {
        ChallengePublicKeyInfo::new()
    }

    fn default_instance() -> &'static ChallengePublicKeyInfo {
        static instance: ::protobuf::rt::LazyV2<ChallengePublicKeyInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChallengePublicKeyInfo::new)
    }
}

impl ::protobuf::Clear for ChallengePublicKeyInfo {
    fn clear(&mut self) {
        self.public_key_spki_der.clear();
        self.signature_algorithm.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengePublicKeyInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyPolicy {
    // message fields
    low_entropy_credential: ::std::option::Option<bool>,
    auth_locked: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyPolicy {
    fn default() -> &'a KeyPolicy {
        <KeyPolicy as ::protobuf::Message>::default_instance()
    }
}

impl KeyPolicy {
    pub fn new() -> KeyPolicy {
        ::std::default::Default::default()
    }

    // optional bool low_entropy_credential = 1;


    pub fn get_low_entropy_credential(&self) -> bool {
        self.low_entropy_credential.unwrap_or(false)
    }
    pub fn clear_low_entropy_credential(&mut self) {
        self.low_entropy_credential = ::std::option::Option::None;
    }

    pub fn has_low_entropy_credential(&self) -> bool {
        self.low_entropy_credential.is_some()
    }

    // Param is passed by value, moved
    pub fn set_low_entropy_credential(&mut self, v: bool) {
        self.low_entropy_credential = ::std::option::Option::Some(v);
    }

    // optional bool auth_locked = 2;


    pub fn get_auth_locked(&self) -> bool {
        self.auth_locked.unwrap_or(false)
    }
    pub fn clear_auth_locked(&mut self) {
        self.auth_locked = ::std::option::Option::None;
    }

    pub fn has_auth_locked(&self) -> bool {
        self.auth_locked.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_locked(&mut self, v: bool) {
        self.auth_locked = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for KeyPolicy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.low_entropy_credential = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auth_locked = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.low_entropy_credential {
            my_size += 2;
        }
        if let Some(v) = self.auth_locked {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.low_entropy_credential {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.auth_locked {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyPolicy {
        KeyPolicy::new()
    }

    fn default_instance() -> &'static KeyPolicy {
        static instance: ::protobuf::rt::LazyV2<KeyPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyPolicy::new)
    }
}

impl ::protobuf::Clear for KeyPolicy {
    fn clear(&mut self) {
        self.low_entropy_credential = ::std::option::Option::None;
        self.auth_locked = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyData {
    // message fields
    field_type: ::std::option::Option<KeyData_KeyType>,
    label: ::protobuf::SingularField<::std::string::String>,
    pub privileges: ::protobuf::SingularPtrField<KeyPrivileges>,
    revision: ::std::option::Option<i64>,
    pub provider_data: ::protobuf::SingularPtrField<KeyProviderData>,
    pub challenge_response_key: ::protobuf::RepeatedField<ChallengePublicKeyInfo>,
    pub policy: ::protobuf::SingularPtrField<KeyPolicy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyData {
    fn default() -> &'a KeyData {
        <KeyData as ::protobuf::Message>::default_instance()
    }
}

impl KeyData {
    pub fn new() -> KeyData {
        ::std::default::Default::default()
    }

    // optional .cryptohome.KeyData.KeyType type = 1;


    pub fn get_field_type(&self) -> KeyData_KeyType {
        self.field_type.unwrap_or(KeyData_KeyType::KEY_TYPE_PASSWORD)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: KeyData_KeyType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional string label = 2;


    pub fn get_label(&self) -> &str {
        match self.label.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        if self.label.is_none() {
            self.label.set_default();
        }
        self.label.as_mut().unwrap()
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        self.label.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .cryptohome.KeyPrivileges privileges = 3;


    pub fn get_privileges(&self) -> &KeyPrivileges {
        self.privileges.as_ref().unwrap_or_else(|| <KeyPrivileges as ::protobuf::Message>::default_instance())
    }
    pub fn clear_privileges(&mut self) {
        self.privileges.clear();
    }

    pub fn has_privileges(&self) -> bool {
        self.privileges.is_some()
    }

    // Param is passed by value, moved
    pub fn set_privileges(&mut self, v: KeyPrivileges) {
        self.privileges = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_privileges(&mut self) -> &mut KeyPrivileges {
        if self.privileges.is_none() {
            self.privileges.set_default();
        }
        self.privileges.as_mut().unwrap()
    }

    // Take field
    pub fn take_privileges(&mut self) -> KeyPrivileges {
        self.privileges.take().unwrap_or_else(|| KeyPrivileges::new())
    }

    // optional int64 revision = 4;


    pub fn get_revision(&self) -> i64 {
        self.revision.unwrap_or(0)
    }
    pub fn clear_revision(&mut self) {
        self.revision = ::std::option::Option::None;
    }

    pub fn has_revision(&self) -> bool {
        self.revision.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: i64) {
        self.revision = ::std::option::Option::Some(v);
    }

    // optional .cryptohome.KeyProviderData provider_data = 6;


    pub fn get_provider_data(&self) -> &KeyProviderData {
        self.provider_data.as_ref().unwrap_or_else(|| <KeyProviderData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_provider_data(&mut self) {
        self.provider_data.clear();
    }

    pub fn has_provider_data(&self) -> bool {
        self.provider_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provider_data(&mut self, v: KeyProviderData) {
        self.provider_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider_data(&mut self) -> &mut KeyProviderData {
        if self.provider_data.is_none() {
            self.provider_data.set_default();
        }
        self.provider_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_provider_data(&mut self) -> KeyProviderData {
        self.provider_data.take().unwrap_or_else(|| KeyProviderData::new())
    }

    // repeated .cryptohome.ChallengePublicKeyInfo challenge_response_key = 7;


    pub fn get_challenge_response_key(&self) -> &[ChallengePublicKeyInfo] {
        &self.challenge_response_key
    }
    pub fn clear_challenge_response_key(&mut self) {
        self.challenge_response_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_challenge_response_key(&mut self, v: ::protobuf::RepeatedField<ChallengePublicKeyInfo>) {
        self.challenge_response_key = v;
    }

    // Mutable pointer to the field.
    pub fn mut_challenge_response_key(&mut self) -> &mut ::protobuf::RepeatedField<ChallengePublicKeyInfo> {
        &mut self.challenge_response_key
    }

    // Take field
    pub fn take_challenge_response_key(&mut self) -> ::protobuf::RepeatedField<ChallengePublicKeyInfo> {
        ::std::mem::replace(&mut self.challenge_response_key, ::protobuf::RepeatedField::new())
    }

    // optional .cryptohome.KeyPolicy policy = 8;


    pub fn get_policy(&self) -> &KeyPolicy {
        self.policy.as_ref().unwrap_or_else(|| <KeyPolicy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_policy(&mut self) {
        self.policy.clear();
    }

    pub fn has_policy(&self) -> bool {
        self.policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: KeyPolicy) {
        self.policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy(&mut self) -> &mut KeyPolicy {
        if self.policy.is_none() {
            self.policy.set_default();
        }
        self.policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy(&mut self) -> KeyPolicy {
        self.policy.take().unwrap_or_else(|| KeyPolicy::new())
    }
}

impl ::protobuf::Message for KeyData {
    fn is_initialized(&self) -> bool {
        for v in &self.privileges {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.provider_data {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.challenge_response_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.privileges)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.revision = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.provider_data)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.challenge_response_key)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.label.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.privileges.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.revision {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.provider_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.challenge_response_key {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.label.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.privileges.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.revision {
            os.write_int64(4, v)?;
        }
        if let Some(ref v) = self.provider_data.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.challenge_response_key {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.policy.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyData {
        KeyData::new()
    }

    fn default_instance() -> &'static KeyData {
        static instance: ::protobuf::rt::LazyV2<KeyData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyData::new)
    }
}

impl ::protobuf::Clear for KeyData {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.label.clear();
        self.privileges.clear();
        self.revision = ::std::option::Option::None;
        self.provider_data.clear();
        self.challenge_response_key.clear();
        self.policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum KeyData_KeyType {
    KEY_TYPE_PASSWORD = 0,
    KEY_TYPE_CHALLENGE_RESPONSE = 1,
    KEY_TYPE_FINGERPRINT = 2,
    KEY_TYPE_KIOSK = 3,
}

impl ::protobuf::ProtobufEnum for KeyData_KeyType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KeyData_KeyType> {
        match value {
            0 => ::std::option::Option::Some(KeyData_KeyType::KEY_TYPE_PASSWORD),
            1 => ::std::option::Option::Some(KeyData_KeyType::KEY_TYPE_CHALLENGE_RESPONSE),
            2 => ::std::option::Option::Some(KeyData_KeyType::KEY_TYPE_FINGERPRINT),
            3 => ::std::option::Option::Some(KeyData_KeyType::KEY_TYPE_KIOSK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [KeyData_KeyType] = &[
            KeyData_KeyType::KEY_TYPE_PASSWORD,
            KeyData_KeyType::KEY_TYPE_CHALLENGE_RESPONSE,
            KeyData_KeyType::KEY_TYPE_FINGERPRINT,
            KeyData_KeyType::KEY_TYPE_KIOSK,
        ];
        values
    }
}

impl ::std::marker::Copy for KeyData_KeyType {
}

impl ::std::default::Default for KeyData_KeyType {
    fn default() -> Self {
        KeyData_KeyType::KEY_TYPE_PASSWORD
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyData_KeyType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Key {
    // message fields
    pub data: ::protobuf::SingularPtrField<KeyData>,
    secret: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Key {
    fn default() -> &'a Key {
        <Key as ::protobuf::Message>::default_instance()
    }
}

impl Key {
    pub fn new() -> Key {
        ::std::default::Default::default()
    }

    // optional .cryptohome.KeyData data = 1;


    pub fn get_data(&self) -> &KeyData {
        self.data.as_ref().unwrap_or_else(|| <KeyData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: KeyData) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut KeyData {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> KeyData {
        self.data.take().unwrap_or_else(|| KeyData::new())
    }

    // optional bytes secret = 2;


    pub fn get_secret(&self) -> &[u8] {
        match self.secret.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    pub fn has_secret(&self) -> bool {
        self.secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::vec::Vec<u8>) {
        self.secret = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.secret.is_none() {
            self.secret.set_default();
        }
        self.secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::vec::Vec<u8> {
        self.secret.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Key {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.secret)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.secret.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.secret.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Key {
        Key::new()
    }

    fn default_instance() -> &'static Key {
        static instance: ::protobuf::rt::LazyV2<Key> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Key::new)
    }
}

impl ::protobuf::Clear for Key {
    fn clear(&mut self) {
        self.data.clear();
        self.secret.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Key {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ChallengeSignatureAlgorithm {
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA1 = 1,
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA256 = 2,
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA384 = 3,
    CHALLENGE_RSASSA_PKCS1_V1_5_SHA512 = 4,
}

impl ::protobuf::ProtobufEnum for ChallengeSignatureAlgorithm {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ChallengeSignatureAlgorithm> {
        match value {
            1 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1),
            2 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA256),
            3 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA384),
            4 => ::std::option::Option::Some(ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA512),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ChallengeSignatureAlgorithm] = &[
            ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1,
            ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA256,
            ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA384,
            ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA512,
        ];
        values
    }
}

impl ::std::marker::Copy for ChallengeSignatureAlgorithm {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for ChallengeSignatureAlgorithm {
    fn default() -> Self {
        ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1
    }
}

impl ::protobuf::reflect::ProtobufValue for ChallengeSignatureAlgorithm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
