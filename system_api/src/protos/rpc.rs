// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.9
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `rpc.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.AccountIdentifier)
pub struct AccountIdentifier {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.AccountIdentifier.email)
    pub email: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:cryptohome.AccountIdentifier.account_id)
    pub account_id: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.AccountIdentifier.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AccountIdentifier {
    fn default() -> &'a AccountIdentifier {
        <AccountIdentifier as ::protobuf::Message>::default_instance()
    }
}

impl AccountIdentifier {
    pub fn new() -> AccountIdentifier {
        ::std::default::Default::default()
    }

    // optional string email = 1;

    pub fn email(&self) -> &str {
        match self.email.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_email(&mut self) {
        self.email = ::std::option::Option::None;
    }

    pub fn has_email(&self) -> bool {
        self.email.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        if self.email.is_none() {
            self.email = ::std::option::Option::Some(::std::string::String::new());
        }
        self.email.as_mut().unwrap()
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        self.email.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string account_id = 2;

    pub fn account_id(&self) -> &str {
        match self.account_id.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account_id(&mut self) {
        self.account_id = ::std::option::Option::None;
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        if self.account_id.is_none() {
            self.account_id = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        self.account_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for AccountIdentifier {
    const NAME: &'static str = "AccountIdentifier";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.email = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.account_id = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.email.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.account_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.email.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.account_id.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AccountIdentifier {
        AccountIdentifier::new()
    }

    fn clear(&mut self) {
        self.email = ::std::option::Option::None;
        self.account_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AccountIdentifier {
        static instance: AccountIdentifier = AccountIdentifier {
            email: ::std::option::Option::None,
            account_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.KeyDelegate)
pub struct KeyDelegate {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.KeyDelegate.dbus_service_name)
    pub dbus_service_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:cryptohome.KeyDelegate.dbus_object_path)
    pub dbus_object_path: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.KeyDelegate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyDelegate {
    fn default() -> &'a KeyDelegate {
        <KeyDelegate as ::protobuf::Message>::default_instance()
    }
}

impl KeyDelegate {
    pub fn new() -> KeyDelegate {
        ::std::default::Default::default()
    }

    // optional string dbus_service_name = 1;

    pub fn dbus_service_name(&self) -> &str {
        match self.dbus_service_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_dbus_service_name(&mut self) {
        self.dbus_service_name = ::std::option::Option::None;
    }

    pub fn has_dbus_service_name(&self) -> bool {
        self.dbus_service_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dbus_service_name(&mut self, v: ::std::string::String) {
        self.dbus_service_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dbus_service_name(&mut self) -> &mut ::std::string::String {
        if self.dbus_service_name.is_none() {
            self.dbus_service_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.dbus_service_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_dbus_service_name(&mut self) -> ::std::string::String {
        self.dbus_service_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string dbus_object_path = 2;

    pub fn dbus_object_path(&self) -> &str {
        match self.dbus_object_path.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_dbus_object_path(&mut self) {
        self.dbus_object_path = ::std::option::Option::None;
    }

    pub fn has_dbus_object_path(&self) -> bool {
        self.dbus_object_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dbus_object_path(&mut self, v: ::std::string::String) {
        self.dbus_object_path = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dbus_object_path(&mut self) -> &mut ::std::string::String {
        if self.dbus_object_path.is_none() {
            self.dbus_object_path = ::std::option::Option::Some(::std::string::String::new());
        }
        self.dbus_object_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_dbus_object_path(&mut self) -> ::std::string::String {
        self.dbus_object_path.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for KeyDelegate {
    const NAME: &'static str = "KeyDelegate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.dbus_service_name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.dbus_object_path = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.dbus_service_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.dbus_object_path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.dbus_service_name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.dbus_object_path.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyDelegate {
        KeyDelegate::new()
    }

    fn clear(&mut self) {
        self.dbus_service_name = ::std::option::Option::None;
        self.dbus_object_path = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyDelegate {
        static instance: KeyDelegate = KeyDelegate {
            dbus_service_name: ::std::option::Option::None,
            dbus_object_path: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.AuthorizationRequest)
pub struct AuthorizationRequest {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.AuthorizationRequest.key)
    pub key: ::protobuf::MessageField<super::key::Key>,
    // @@protoc_insertion_point(field:cryptohome.AuthorizationRequest.key_delegate)
    pub key_delegate: ::protobuf::MessageField<KeyDelegate>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.AuthorizationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthorizationRequest {
    fn default() -> &'a AuthorizationRequest {
        <AuthorizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationRequest {
    pub fn new() -> AuthorizationRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AuthorizationRequest {
    const NAME: &'static str = "AuthorizationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.key)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.key_delegate)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.key_delegate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.key_delegate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthorizationRequest {
        AuthorizationRequest::new()
    }

    fn clear(&mut self) {
        self.key.clear();
        self.key_delegate.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthorizationRequest {
        static instance: AuthorizationRequest = AuthorizationRequest {
            key: ::protobuf::MessageField::none(),
            key_delegate: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.KeyChallengeRequest)
pub struct KeyChallengeRequest {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.KeyChallengeRequest.challenge_type)
    pub challenge_type: ::std::option::Option<::protobuf::EnumOrUnknown<key_challenge_request::ChallengeType>>,
    // @@protoc_insertion_point(field:cryptohome.KeyChallengeRequest.signature_request_data)
    pub signature_request_data: ::protobuf::MessageField<SignatureKeyChallengeRequestData>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.KeyChallengeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyChallengeRequest {
    fn default() -> &'a KeyChallengeRequest {
        <KeyChallengeRequest as ::protobuf::Message>::default_instance()
    }
}

impl KeyChallengeRequest {
    pub fn new() -> KeyChallengeRequest {
        ::std::default::Default::default()
    }

    // optional .cryptohome.KeyChallengeRequest.ChallengeType challenge_type = 1;

    pub fn challenge_type(&self) -> key_challenge_request::ChallengeType {
        match self.challenge_type {
            Some(e) => e.enum_value_or(key_challenge_request::ChallengeType::CHALLENGE_TYPE_SIGNATURE),
            None => key_challenge_request::ChallengeType::CHALLENGE_TYPE_SIGNATURE,
        }
    }

    pub fn clear_challenge_type(&mut self) {
        self.challenge_type = ::std::option::Option::None;
    }

    pub fn has_challenge_type(&self) -> bool {
        self.challenge_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_type(&mut self, v: key_challenge_request::ChallengeType) {
        self.challenge_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::protobuf::Message for KeyChallengeRequest {
    const NAME: &'static str = "KeyChallengeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.challenge_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature_request_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.challenge_type {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.signature_request_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.challenge_type {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.signature_request_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyChallengeRequest {
        KeyChallengeRequest::new()
    }

    fn clear(&mut self) {
        self.challenge_type = ::std::option::Option::None;
        self.signature_request_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyChallengeRequest {
        static instance: KeyChallengeRequest = KeyChallengeRequest {
            challenge_type: ::std::option::Option::None,
            signature_request_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `KeyChallengeRequest`
pub mod key_challenge_request {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:cryptohome.KeyChallengeRequest.ChallengeType)
    pub enum ChallengeType {
        // @@protoc_insertion_point(enum_value:cryptohome.KeyChallengeRequest.ChallengeType.CHALLENGE_TYPE_SIGNATURE)
        CHALLENGE_TYPE_SIGNATURE = 1,
    }

    impl ::protobuf::Enum for ChallengeType {
        const NAME: &'static str = "ChallengeType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ChallengeType> {
            match value {
                1 => ::std::option::Option::Some(ChallengeType::CHALLENGE_TYPE_SIGNATURE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ChallengeType] = &[
            ChallengeType::CHALLENGE_TYPE_SIGNATURE,
        ];
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for ChallengeType {
        fn default() -> Self {
            ChallengeType::CHALLENGE_TYPE_SIGNATURE
        }
    }

}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.SignatureKeyChallengeRequestData)
pub struct SignatureKeyChallengeRequestData {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.SignatureKeyChallengeRequestData.data_to_sign)
    pub data_to_sign: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:cryptohome.SignatureKeyChallengeRequestData.public_key_spki_der)
    pub public_key_spki_der: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:cryptohome.SignatureKeyChallengeRequestData.signature_algorithm)
    pub signature_algorithm: ::std::option::Option<::protobuf::EnumOrUnknown<super::key::ChallengeSignatureAlgorithm>>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.SignatureKeyChallengeRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignatureKeyChallengeRequestData {
    fn default() -> &'a SignatureKeyChallengeRequestData {
        <SignatureKeyChallengeRequestData as ::protobuf::Message>::default_instance()
    }
}

impl SignatureKeyChallengeRequestData {
    pub fn new() -> SignatureKeyChallengeRequestData {
        ::std::default::Default::default()
    }

    // optional bytes data_to_sign = 1;

    pub fn data_to_sign(&self) -> &[u8] {
        match self.data_to_sign.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data_to_sign(&mut self) {
        self.data_to_sign = ::std::option::Option::None;
    }

    pub fn has_data_to_sign(&self) -> bool {
        self.data_to_sign.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_to_sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_to_sign = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_to_sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_to_sign.is_none() {
            self.data_to_sign = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data_to_sign.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_to_sign(&mut self) -> ::std::vec::Vec<u8> {
        self.data_to_sign.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes public_key_spki_der = 2;

    pub fn public_key_spki_der(&self) -> &[u8] {
        match self.public_key_spki_der.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_public_key_spki_der(&mut self) {
        self.public_key_spki_der = ::std::option::Option::None;
    }

    pub fn has_public_key_spki_der(&self) -> bool {
        self.public_key_spki_der.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key_spki_der(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key_spki_der = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key_spki_der(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key_spki_der.is_none() {
            self.public_key_spki_der = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.public_key_spki_der.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key_spki_der(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key_spki_der.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .cryptohome.ChallengeSignatureAlgorithm signature_algorithm = 3;

    pub fn signature_algorithm(&self) -> super::key::ChallengeSignatureAlgorithm {
        match self.signature_algorithm {
            Some(e) => e.enum_value_or(super::key::ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1),
            None => super::key::ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1,
        }
    }

    pub fn clear_signature_algorithm(&mut self) {
        self.signature_algorithm = ::std::option::Option::None;
    }

    pub fn has_signature_algorithm(&self) -> bool {
        self.signature_algorithm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_algorithm(&mut self, v: super::key::ChallengeSignatureAlgorithm) {
        self.signature_algorithm = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }
}

impl ::protobuf::Message for SignatureKeyChallengeRequestData {
    const NAME: &'static str = "SignatureKeyChallengeRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data_to_sign = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.public_key_spki_der = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.signature_algorithm = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data_to_sign.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.public_key_spki_der.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.signature_algorithm {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data_to_sign.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.public_key_spki_der.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.signature_algorithm {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignatureKeyChallengeRequestData {
        SignatureKeyChallengeRequestData::new()
    }

    fn clear(&mut self) {
        self.data_to_sign = ::std::option::Option::None;
        self.public_key_spki_der = ::std::option::Option::None;
        self.signature_algorithm = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignatureKeyChallengeRequestData {
        static instance: SignatureKeyChallengeRequestData = SignatureKeyChallengeRequestData {
            data_to_sign: ::std::option::Option::None,
            public_key_spki_der: ::std::option::Option::None,
            signature_algorithm: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.KeyChallengeResponse)
pub struct KeyChallengeResponse {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.KeyChallengeResponse.signature_response_data)
    pub signature_response_data: ::protobuf::MessageField<SignatureKeyChallengeResponseData>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.KeyChallengeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KeyChallengeResponse {
    fn default() -> &'a KeyChallengeResponse {
        <KeyChallengeResponse as ::protobuf::Message>::default_instance()
    }
}

impl KeyChallengeResponse {
    pub fn new() -> KeyChallengeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for KeyChallengeResponse {
    const NAME: &'static str = "KeyChallengeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.signature_response_data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature_response_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature_response_data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KeyChallengeResponse {
        KeyChallengeResponse::new()
    }

    fn clear(&mut self) {
        self.signature_response_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KeyChallengeResponse {
        static instance: KeyChallengeResponse = KeyChallengeResponse {
            signature_response_data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:cryptohome.SignatureKeyChallengeResponseData)
pub struct SignatureKeyChallengeResponseData {
    // message fields
    // @@protoc_insertion_point(field:cryptohome.SignatureKeyChallengeResponseData.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:cryptohome.SignatureKeyChallengeResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignatureKeyChallengeResponseData {
    fn default() -> &'a SignatureKeyChallengeResponseData {
        <SignatureKeyChallengeResponseData as ::protobuf::Message>::default_instance()
    }
}

impl SignatureKeyChallengeResponseData {
    pub fn new() -> SignatureKeyChallengeResponseData {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignatureKeyChallengeResponseData {
    const NAME: &'static str = "SignatureKeyChallengeResponseData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignatureKeyChallengeResponseData {
        SignatureKeyChallengeResponseData::new()
    }

    fn clear(&mut self) {
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignatureKeyChallengeResponseData {
        static instance: SignatureKeyChallengeResponseData = SignatureKeyChallengeResponseData {
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cryptohome.CryptohomeErrorCode)
pub enum CryptohomeErrorCode {
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_NOT_SET)
    CRYPTOHOME_ERROR_NOT_SET = 0,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_ACCOUNT_NOT_FOUND)
    CRYPTOHOME_ERROR_ACCOUNT_NOT_FOUND = 1,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_AUTHORIZATION_KEY_NOT_FOUND)
    CRYPTOHOME_ERROR_AUTHORIZATION_KEY_NOT_FOUND = 2,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_AUTHORIZATION_KEY_FAILED)
    CRYPTOHOME_ERROR_AUTHORIZATION_KEY_FAILED = 3,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_NOT_IMPLEMENTED)
    CRYPTOHOME_ERROR_NOT_IMPLEMENTED = 4,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_MOUNT_FATAL)
    CRYPTOHOME_ERROR_MOUNT_FATAL = 5,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_MOUNT_MOUNT_POINT_BUSY)
    CRYPTOHOME_ERROR_MOUNT_MOUNT_POINT_BUSY = 6,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_TPM_COMM_ERROR)
    CRYPTOHOME_ERROR_TPM_COMM_ERROR = 7,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_TPM_DEFEND_LOCK)
    CRYPTOHOME_ERROR_TPM_DEFEND_LOCK = 8,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_TPM_NEEDS_REBOOT)
    CRYPTOHOME_ERROR_TPM_NEEDS_REBOOT = 9,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_AUTHORIZATION_KEY_DENIED)
    CRYPTOHOME_ERROR_AUTHORIZATION_KEY_DENIED = 10,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_KEY_QUOTA_EXCEEDED)
    CRYPTOHOME_ERROR_KEY_QUOTA_EXCEEDED = 11,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_KEY_LABEL_EXISTS)
    CRYPTOHOME_ERROR_KEY_LABEL_EXISTS = 12,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_BACKING_STORE_FAILURE)
    CRYPTOHOME_ERROR_BACKING_STORE_FAILURE = 13,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_UPDATE_SIGNATURE_INVALID)
    CRYPTOHOME_ERROR_UPDATE_SIGNATURE_INVALID = 14,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_KEY_NOT_FOUND)
    CRYPTOHOME_ERROR_KEY_NOT_FOUND = 15,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_LOCKBOX_SIGNATURE_INVALID)
    CRYPTOHOME_ERROR_LOCKBOX_SIGNATURE_INVALID = 16,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_LOCKBOX_CANNOT_SIGN)
    CRYPTOHOME_ERROR_LOCKBOX_CANNOT_SIGN = 17,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_BOOT_ATTRIBUTE_NOT_FOUND)
    CRYPTOHOME_ERROR_BOOT_ATTRIBUTE_NOT_FOUND = 18,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_BOOT_ATTRIBUTES_CANNOT_SIGN)
    CRYPTOHOME_ERROR_BOOT_ATTRIBUTES_CANNOT_SIGN = 19,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_TPM_EK_NOT_AVAILABLE)
    CRYPTOHOME_ERROR_TPM_EK_NOT_AVAILABLE = 20,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_ATTESTATION_NOT_READY)
    CRYPTOHOME_ERROR_ATTESTATION_NOT_READY = 21,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_CANNOT_CONNECT_TO_CA)
    CRYPTOHOME_ERROR_CANNOT_CONNECT_TO_CA = 22,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_CA_REFUSED_ENROLLMENT)
    CRYPTOHOME_ERROR_CA_REFUSED_ENROLLMENT = 23,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_CA_REFUSED_CERTIFICATE)
    CRYPTOHOME_ERROR_CA_REFUSED_CERTIFICATE = 24,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_INTERNAL_ATTESTATION_ERROR)
    CRYPTOHOME_ERROR_INTERNAL_ATTESTATION_ERROR = 25,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_INVALID)
    CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_INVALID = 26,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_STORE)
    CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_STORE = 27,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_REMOVE)
    CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_REMOVE = 28,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_MOUNT_OLD_ENCRYPTION)
    CRYPTOHOME_ERROR_MOUNT_OLD_ENCRYPTION = 29,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_MOUNT_PREVIOUS_MIGRATION_INCOMPLETE)
    CRYPTOHOME_ERROR_MOUNT_PREVIOUS_MIGRATION_INCOMPLETE = 30,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_MIGRATE_KEY_FAILED)
    CRYPTOHOME_ERROR_MIGRATE_KEY_FAILED = 31,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_REMOVE_FAILED)
    CRYPTOHOME_ERROR_REMOVE_FAILED = 32,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_INVALID_ARGUMENT)
    CRYPTOHOME_ERROR_INVALID_ARGUMENT = 33,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_GET_FAILED)
    CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_GET_FAILED = 34,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_SET_FAILED)
    CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_SET_FAILED = 35,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_FINALIZE_FAILED)
    CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_FINALIZE_FAILED = 36,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_UPDATE_USER_ACTIVITY_TIMESTAMP_FAILED)
    CRYPTOHOME_ERROR_UPDATE_USER_ACTIVITY_TIMESTAMP_FAILED = 37,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FAILED_TO_READ_PCR)
    CRYPTOHOME_ERROR_FAILED_TO_READ_PCR = 38,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_PCR_ALREADY_EXTENDED)
    CRYPTOHOME_ERROR_PCR_ALREADY_EXTENDED = 39,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FAILED_TO_EXTEND_PCR)
    CRYPTOHOME_ERROR_FAILED_TO_EXTEND_PCR = 40,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_TPM_UPDATE_REQUIRED)
    CRYPTOHOME_ERROR_TPM_UPDATE_REQUIRED = 41,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FINGERPRINT_ERROR_INTERNAL)
    CRYPTOHOME_ERROR_FINGERPRINT_ERROR_INTERNAL = 42,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FINGERPRINT_RETRY_REQUIRED)
    CRYPTOHOME_ERROR_FINGERPRINT_RETRY_REQUIRED = 43,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FINGERPRINT_DENIED)
    CRYPTOHOME_ERROR_FINGERPRINT_DENIED = 44,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_VAULT_UNRECOVERABLE)
    CRYPTOHOME_ERROR_VAULT_UNRECOVERABLE = 45,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FIDO_MAKE_CREDENTIAL_FAILED)
    CRYPTOHOME_ERROR_FIDO_MAKE_CREDENTIAL_FAILED = 46,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_FIDO_GET_ASSERTION_FAILED)
    CRYPTOHOME_ERROR_FIDO_GET_ASSERTION_FAILED = 47,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_TOKEN_SERIALIZATION_FAILED)
    CRYPTOHOME_TOKEN_SERIALIZATION_FAILED = 48,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_INVALID_AUTH_SESSION_TOKEN)
    CRYPTOHOME_INVALID_AUTH_SESSION_TOKEN = 49,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ADD_CREDENTIALS_FAILED)
    CRYPTOHOME_ADD_CREDENTIALS_FAILED = 50,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_UNAUTHENTICATED_AUTH_SESSION)
    CRYPTOHOME_ERROR_UNAUTHENTICATED_AUTH_SESSION = 51,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_UNKNOWN_LEGACY)
    CRYPTOHOME_ERROR_UNKNOWN_LEGACY = 52,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_UNUSABLE_VAULT)
    CRYPTOHOME_ERROR_UNUSABLE_VAULT = 53,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_REMOVE_CREDENTIALS_FAILED)
    CRYPTOHOME_REMOVE_CREDENTIALS_FAILED = 54,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_UPDATE_CREDENTIALS_FAILED)
    CRYPTOHOME_UPDATE_CREDENTIALS_FAILED = 55,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_RECOVERY_TRANSIENT)
    CRYPTOHOME_ERROR_RECOVERY_TRANSIENT = 56,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_RECOVERY_FATAL)
    CRYPTOHOME_ERROR_RECOVERY_FATAL = 57,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_BIOMETRICS_BUSY)
    CRYPTOHOME_ERROR_BIOMETRICS_BUSY = 58,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_CREDENTIAL_LOCKED)
    CRYPTOHOME_ERROR_CREDENTIAL_LOCKED = 59,
    // @@protoc_insertion_point(enum_value:cryptohome.CryptohomeErrorCode.CRYPTOHOME_ERROR_CREDENTIAL_EXPIRED)
    CRYPTOHOME_ERROR_CREDENTIAL_EXPIRED = 60,
}

impl ::protobuf::Enum for CryptohomeErrorCode {
    const NAME: &'static str = "CryptohomeErrorCode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CryptohomeErrorCode> {
        match value {
            0 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_SET),
            1 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_ACCOUNT_NOT_FOUND),
            2 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_NOT_FOUND),
            3 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_FAILED),
            4 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_IMPLEMENTED),
            5 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_FATAL),
            6 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_MOUNT_POINT_BUSY),
            7 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_COMM_ERROR),
            8 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_DEFEND_LOCK),
            9 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_NEEDS_REBOOT),
            10 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_DENIED),
            11 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_QUOTA_EXCEEDED),
            12 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_LABEL_EXISTS),
            13 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_BACKING_STORE_FAILURE),
            14 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_SIGNATURE_INVALID),
            15 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_NOT_FOUND),
            16 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_SIGNATURE_INVALID),
            17 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_CANNOT_SIGN),
            18 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTE_NOT_FOUND),
            19 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTES_CANNOT_SIGN),
            20 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_EK_NOT_AVAILABLE),
            21 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_ATTESTATION_NOT_READY),
            22 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CANNOT_CONNECT_TO_CA),
            23 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_ENROLLMENT),
            24 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_CERTIFICATE),
            25 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INTERNAL_ATTESTATION_ERROR),
            26 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_INVALID),
            27 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_STORE),
            28 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_REMOVE),
            29 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_OLD_ENCRYPTION),
            30 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_PREVIOUS_MIGRATION_INCOMPLETE),
            31 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MIGRATE_KEY_FAILED),
            32 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_REMOVE_FAILED),
            33 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INVALID_ARGUMENT),
            34 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_GET_FAILED),
            35 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_SET_FAILED),
            36 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_FINALIZE_FAILED),
            37 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_USER_ACTIVITY_TIMESTAMP_FAILED),
            38 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_READ_PCR),
            39 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_PCR_ALREADY_EXTENDED),
            40 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_EXTEND_PCR),
            41 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_UPDATE_REQUIRED),
            42 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_ERROR_INTERNAL),
            43 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_RETRY_REQUIRED),
            44 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_DENIED),
            45 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_VAULT_UNRECOVERABLE),
            46 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_MAKE_CREDENTIAL_FAILED),
            47 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_GET_ASSERTION_FAILED),
            48 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_TOKEN_SERIALIZATION_FAILED),
            49 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_INVALID_AUTH_SESSION_TOKEN),
            50 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ADD_CREDENTIALS_FAILED),
            51 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UNAUTHENTICATED_AUTH_SESSION),
            52 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UNKNOWN_LEGACY),
            53 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UNUSABLE_VAULT),
            54 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_REMOVE_CREDENTIALS_FAILED),
            55 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_UPDATE_CREDENTIALS_FAILED),
            56 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_RECOVERY_TRANSIENT),
            57 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_RECOVERY_FATAL),
            58 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_BIOMETRICS_BUSY),
            59 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CREDENTIAL_LOCKED),
            60 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CREDENTIAL_EXPIRED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CryptohomeErrorCode] = &[
        CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_SET,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_ACCOUNT_NOT_FOUND,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_NOT_FOUND,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_IMPLEMENTED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_FATAL,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_MOUNT_POINT_BUSY,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_COMM_ERROR,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_DEFEND_LOCK,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_NEEDS_REBOOT,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_DENIED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_QUOTA_EXCEEDED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_LABEL_EXISTS,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_BACKING_STORE_FAILURE,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_SIGNATURE_INVALID,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_NOT_FOUND,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_SIGNATURE_INVALID,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_CANNOT_SIGN,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTE_NOT_FOUND,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTES_CANNOT_SIGN,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_EK_NOT_AVAILABLE,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_ATTESTATION_NOT_READY,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_CANNOT_CONNECT_TO_CA,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_ENROLLMENT,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_CERTIFICATE,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_INTERNAL_ATTESTATION_ERROR,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_INVALID,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_STORE,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_REMOVE,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_OLD_ENCRYPTION,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_PREVIOUS_MIGRATION_INCOMPLETE,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_MIGRATE_KEY_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_REMOVE_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_INVALID_ARGUMENT,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_GET_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_SET_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_FINALIZE_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_USER_ACTIVITY_TIMESTAMP_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_READ_PCR,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_PCR_ALREADY_EXTENDED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_EXTEND_PCR,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_UPDATE_REQUIRED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_ERROR_INTERNAL,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_RETRY_REQUIRED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_DENIED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_VAULT_UNRECOVERABLE,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_MAKE_CREDENTIAL_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_GET_ASSERTION_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_TOKEN_SERIALIZATION_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_INVALID_AUTH_SESSION_TOKEN,
        CryptohomeErrorCode::CRYPTOHOME_ADD_CREDENTIALS_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_UNAUTHENTICATED_AUTH_SESSION,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_UNKNOWN_LEGACY,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_UNUSABLE_VAULT,
        CryptohomeErrorCode::CRYPTOHOME_REMOVE_CREDENTIALS_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_UPDATE_CREDENTIALS_FAILED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_RECOVERY_TRANSIENT,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_RECOVERY_FATAL,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_BIOMETRICS_BUSY,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_CREDENTIAL_LOCKED,
        CryptohomeErrorCode::CRYPTOHOME_ERROR_CREDENTIAL_EXPIRED,
    ];
}

impl ::std::default::Default for CryptohomeErrorCode {
    fn default() -> Self {
        CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_SET
    }
}


#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:cryptohome.FirmwareManagementParametersFlags)
pub enum FirmwareManagementParametersFlags {
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.NONE)
    NONE = 0,
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.DEVELOPER_DISABLE_BOOT)
    DEVELOPER_DISABLE_BOOT = 1,
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.DEVELOPER_DISABLE_RECOVERY_INSTALL)
    DEVELOPER_DISABLE_RECOVERY_INSTALL = 2,
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.DEVELOPER_DISABLE_RECOVERY_ROOTFS)
    DEVELOPER_DISABLE_RECOVERY_ROOTFS = 4,
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.DEVELOPER_ENABLE_USB)
    DEVELOPER_ENABLE_USB = 8,
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.DEVELOPER_ENABLE_LEGACY)
    DEVELOPER_ENABLE_LEGACY = 16,
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.DEVELOPER_USE_KEY_HASH)
    DEVELOPER_USE_KEY_HASH = 32,
    // @@protoc_insertion_point(enum_value:cryptohome.FirmwareManagementParametersFlags.DEVELOPER_DISABLE_CASE_CLOSED_DEBUGGING_UNLOCK)
    DEVELOPER_DISABLE_CASE_CLOSED_DEBUGGING_UNLOCK = 64,
}

impl ::protobuf::Enum for FirmwareManagementParametersFlags {
    const NAME: &'static str = "FirmwareManagementParametersFlags";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FirmwareManagementParametersFlags> {
        match value {
            0 => ::std::option::Option::Some(FirmwareManagementParametersFlags::NONE),
            1 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_BOOT),
            2 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_INSTALL),
            4 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_ROOTFS),
            8 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_ENABLE_USB),
            16 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_ENABLE_LEGACY),
            32 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_USE_KEY_HASH),
            64 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_CASE_CLOSED_DEBUGGING_UNLOCK),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FirmwareManagementParametersFlags] = &[
        FirmwareManagementParametersFlags::NONE,
        FirmwareManagementParametersFlags::DEVELOPER_DISABLE_BOOT,
        FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_INSTALL,
        FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_ROOTFS,
        FirmwareManagementParametersFlags::DEVELOPER_ENABLE_USB,
        FirmwareManagementParametersFlags::DEVELOPER_ENABLE_LEGACY,
        FirmwareManagementParametersFlags::DEVELOPER_USE_KEY_HASH,
        FirmwareManagementParametersFlags::DEVELOPER_DISABLE_CASE_CLOSED_DEBUGGING_UNLOCK,
    ];
}

impl ::std::default::Default for FirmwareManagementParametersFlags {
    fn default() -> Self {
        FirmwareManagementParametersFlags::NONE
    }
}

