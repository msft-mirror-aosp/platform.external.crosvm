// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct AccountIdentifier {
    // message fields
    email: ::protobuf::SingularField<::std::string::String>,
    account_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountIdentifier {
    fn default() -> &'a AccountIdentifier {
        <AccountIdentifier as ::protobuf::Message>::default_instance()
    }
}

impl AccountIdentifier {
    pub fn new() -> AccountIdentifier {
        ::std::default::Default::default()
    }

    // optional string email = 1;


    pub fn get_email(&self) -> &str {
        match self.email.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    pub fn has_email(&self) -> bool {
        self.email.is_some()
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        if self.email.is_none() {
            self.email.set_default();
        }
        self.email.as_mut().unwrap()
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        self.email.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string account_id = 2;


    pub fn get_account_id(&self) -> &str {
        match self.account_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        if self.account_id.is_none() {
            self.account_id.set_default();
        }
        self.account_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        self.account_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for AccountIdentifier {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.email)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.account_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.email.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.account_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.email.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.account_id.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountIdentifier {
        AccountIdentifier::new()
    }

    fn default_instance() -> &'static AccountIdentifier {
        static instance: ::protobuf::rt::LazyV2<AccountIdentifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountIdentifier::new)
    }
}

impl ::protobuf::Clear for AccountIdentifier {
    fn clear(&mut self) {
        self.email.clear();
        self.account_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountIdentifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyDelegate {
    // message fields
    dbus_service_name: ::protobuf::SingularField<::std::string::String>,
    dbus_object_path: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyDelegate {
    fn default() -> &'a KeyDelegate {
        <KeyDelegate as ::protobuf::Message>::default_instance()
    }
}

impl KeyDelegate {
    pub fn new() -> KeyDelegate {
        ::std::default::Default::default()
    }

    // optional string dbus_service_name = 1;


    pub fn get_dbus_service_name(&self) -> &str {
        match self.dbus_service_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_dbus_service_name(&mut self) {
        self.dbus_service_name.clear();
    }

    pub fn has_dbus_service_name(&self) -> bool {
        self.dbus_service_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dbus_service_name(&mut self, v: ::std::string::String) {
        self.dbus_service_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dbus_service_name(&mut self) -> &mut ::std::string::String {
        if self.dbus_service_name.is_none() {
            self.dbus_service_name.set_default();
        }
        self.dbus_service_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_dbus_service_name(&mut self) -> ::std::string::String {
        self.dbus_service_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string dbus_object_path = 2;


    pub fn get_dbus_object_path(&self) -> &str {
        match self.dbus_object_path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_dbus_object_path(&mut self) {
        self.dbus_object_path.clear();
    }

    pub fn has_dbus_object_path(&self) -> bool {
        self.dbus_object_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dbus_object_path(&mut self, v: ::std::string::String) {
        self.dbus_object_path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dbus_object_path(&mut self) -> &mut ::std::string::String {
        if self.dbus_object_path.is_none() {
            self.dbus_object_path.set_default();
        }
        self.dbus_object_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_dbus_object_path(&mut self) -> ::std::string::String {
        self.dbus_object_path.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for KeyDelegate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.dbus_service_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.dbus_object_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.dbus_service_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.dbus_object_path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.dbus_service_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.dbus_object_path.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyDelegate {
        KeyDelegate::new()
    }

    fn default_instance() -> &'static KeyDelegate {
        static instance: ::protobuf::rt::LazyV2<KeyDelegate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyDelegate::new)
    }
}

impl ::protobuf::Clear for KeyDelegate {
    fn clear(&mut self) {
        self.dbus_service_name.clear();
        self.dbus_object_path.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyDelegate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct AuthorizationRequest {
    // message fields
    pub key: ::protobuf::SingularPtrField<super::key::Key>,
    pub key_delegate: ::protobuf::SingularPtrField<KeyDelegate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthorizationRequest {
    fn default() -> &'a AuthorizationRequest {
        <AuthorizationRequest as ::protobuf::Message>::default_instance()
    }
}

impl AuthorizationRequest {
    pub fn new() -> AuthorizationRequest {
        ::std::default::Default::default()
    }

    // optional .cryptohome.Key key = 1;


    pub fn get_key(&self) -> &super::key::Key {
        self.key.as_ref().unwrap_or_else(|| <super::key::Key as ::protobuf::Message>::default_instance())
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: super::key::Key) {
        self.key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut super::key::Key {
        if self.key.is_none() {
            self.key.set_default();
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> super::key::Key {
        self.key.take().unwrap_or_else(|| super::key::Key::new())
    }

    // optional .cryptohome.KeyDelegate key_delegate = 2;


    pub fn get_key_delegate(&self) -> &KeyDelegate {
        self.key_delegate.as_ref().unwrap_or_else(|| <KeyDelegate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_key_delegate(&mut self) {
        self.key_delegate.clear();
    }

    pub fn has_key_delegate(&self) -> bool {
        self.key_delegate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_delegate(&mut self, v: KeyDelegate) {
        self.key_delegate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_delegate(&mut self) -> &mut KeyDelegate {
        if self.key_delegate.is_none() {
            self.key_delegate.set_default();
        }
        self.key_delegate.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_delegate(&mut self) -> KeyDelegate {
        self.key_delegate.take().unwrap_or_else(|| KeyDelegate::new())
    }
}

impl ::protobuf::Message for AuthorizationRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key_delegate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key_delegate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.key_delegate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.key_delegate.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthorizationRequest {
        AuthorizationRequest::new()
    }

    fn default_instance() -> &'static AuthorizationRequest {
        static instance: ::protobuf::rt::LazyV2<AuthorizationRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthorizationRequest::new)
    }
}

impl ::protobuf::Clear for AuthorizationRequest {
    fn clear(&mut self) {
        self.key.clear();
        self.key_delegate.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthorizationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyChallengeRequest {
    // message fields
    challenge_type: ::std::option::Option<KeyChallengeRequest_ChallengeType>,
    pub signature_request_data: ::protobuf::SingularPtrField<SignatureKeyChallengeRequestData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyChallengeRequest {
    fn default() -> &'a KeyChallengeRequest {
        <KeyChallengeRequest as ::protobuf::Message>::default_instance()
    }
}

impl KeyChallengeRequest {
    pub fn new() -> KeyChallengeRequest {
        ::std::default::Default::default()
    }

    // optional .cryptohome.KeyChallengeRequest.ChallengeType challenge_type = 1;


    pub fn get_challenge_type(&self) -> KeyChallengeRequest_ChallengeType {
        self.challenge_type.unwrap_or(KeyChallengeRequest_ChallengeType::CHALLENGE_TYPE_SIGNATURE)
    }
    pub fn clear_challenge_type(&mut self) {
        self.challenge_type = ::std::option::Option::None;
    }

    pub fn has_challenge_type(&self) -> bool {
        self.challenge_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge_type(&mut self, v: KeyChallengeRequest_ChallengeType) {
        self.challenge_type = ::std::option::Option::Some(v);
    }

    // optional .cryptohome.SignatureKeyChallengeRequestData signature_request_data = 2;


    pub fn get_signature_request_data(&self) -> &SignatureKeyChallengeRequestData {
        self.signature_request_data.as_ref().unwrap_or_else(|| <SignatureKeyChallengeRequestData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature_request_data(&mut self) {
        self.signature_request_data.clear();
    }

    pub fn has_signature_request_data(&self) -> bool {
        self.signature_request_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_request_data(&mut self, v: SignatureKeyChallengeRequestData) {
        self.signature_request_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_request_data(&mut self) -> &mut SignatureKeyChallengeRequestData {
        if self.signature_request_data.is_none() {
            self.signature_request_data.set_default();
        }
        self.signature_request_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_request_data(&mut self) -> SignatureKeyChallengeRequestData {
        self.signature_request_data.take().unwrap_or_else(|| SignatureKeyChallengeRequestData::new())
    }
}

impl ::protobuf::Message for KeyChallengeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.signature_request_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.challenge_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature_request_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.challenge_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.signature_request_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.challenge_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.signature_request_data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyChallengeRequest {
        KeyChallengeRequest::new()
    }

    fn default_instance() -> &'static KeyChallengeRequest {
        static instance: ::protobuf::rt::LazyV2<KeyChallengeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyChallengeRequest::new)
    }
}

impl ::protobuf::Clear for KeyChallengeRequest {
    fn clear(&mut self) {
        self.challenge_type = ::std::option::Option::None;
        self.signature_request_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyChallengeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum KeyChallengeRequest_ChallengeType {
    CHALLENGE_TYPE_SIGNATURE = 1,
}

impl ::protobuf::ProtobufEnum for KeyChallengeRequest_ChallengeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KeyChallengeRequest_ChallengeType> {
        match value {
            1 => ::std::option::Option::Some(KeyChallengeRequest_ChallengeType::CHALLENGE_TYPE_SIGNATURE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [KeyChallengeRequest_ChallengeType] = &[
            KeyChallengeRequest_ChallengeType::CHALLENGE_TYPE_SIGNATURE,
        ];
        values
    }
}

impl ::std::marker::Copy for KeyChallengeRequest_ChallengeType {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for KeyChallengeRequest_ChallengeType {
    fn default() -> Self {
        KeyChallengeRequest_ChallengeType::CHALLENGE_TYPE_SIGNATURE
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyChallengeRequest_ChallengeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SignatureKeyChallengeRequestData {
    // message fields
    data_to_sign: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    public_key_spki_der: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature_algorithm: ::std::option::Option<super::key::ChallengeSignatureAlgorithm>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureKeyChallengeRequestData {
    fn default() -> &'a SignatureKeyChallengeRequestData {
        <SignatureKeyChallengeRequestData as ::protobuf::Message>::default_instance()
    }
}

impl SignatureKeyChallengeRequestData {
    pub fn new() -> SignatureKeyChallengeRequestData {
        ::std::default::Default::default()
    }

    // optional bytes data_to_sign = 1;


    pub fn get_data_to_sign(&self) -> &[u8] {
        match self.data_to_sign.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_data_to_sign(&mut self) {
        self.data_to_sign.clear();
    }

    pub fn has_data_to_sign(&self) -> bool {
        self.data_to_sign.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_to_sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_to_sign = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_to_sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_to_sign.is_none() {
            self.data_to_sign.set_default();
        }
        self.data_to_sign.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_to_sign(&mut self) -> ::std::vec::Vec<u8> {
        self.data_to_sign.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes public_key_spki_der = 2;


    pub fn get_public_key_spki_der(&self) -> &[u8] {
        match self.public_key_spki_der.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key_spki_der(&mut self) {
        self.public_key_spki_der.clear();
    }

    pub fn has_public_key_spki_der(&self) -> bool {
        self.public_key_spki_der.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key_spki_der(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key_spki_der = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key_spki_der(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key_spki_der.is_none() {
            self.public_key_spki_der.set_default();
        }
        self.public_key_spki_der.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key_spki_der(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key_spki_der.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .cryptohome.ChallengeSignatureAlgorithm signature_algorithm = 3;


    pub fn get_signature_algorithm(&self) -> super::key::ChallengeSignatureAlgorithm {
        self.signature_algorithm.unwrap_or(super::key::ChallengeSignatureAlgorithm::CHALLENGE_RSASSA_PKCS1_V1_5_SHA1)
    }
    pub fn clear_signature_algorithm(&mut self) {
        self.signature_algorithm = ::std::option::Option::None;
    }

    pub fn has_signature_algorithm(&self) -> bool {
        self.signature_algorithm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_algorithm(&mut self, v: super::key::ChallengeSignatureAlgorithm) {
        self.signature_algorithm = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SignatureKeyChallengeRequestData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.data_to_sign)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key_spki_der)?;
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.signature_algorithm, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data_to_sign.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.public_key_spki_der.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.signature_algorithm {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data_to_sign.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.public_key_spki_der.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.signature_algorithm {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureKeyChallengeRequestData {
        SignatureKeyChallengeRequestData::new()
    }

    fn default_instance() -> &'static SignatureKeyChallengeRequestData {
        static instance: ::protobuf::rt::LazyV2<SignatureKeyChallengeRequestData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureKeyChallengeRequestData::new)
    }
}

impl ::protobuf::Clear for SignatureKeyChallengeRequestData {
    fn clear(&mut self) {
        self.data_to_sign.clear();
        self.public_key_spki_der.clear();
        self.signature_algorithm = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureKeyChallengeRequestData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct KeyChallengeResponse {
    // message fields
    pub signature_response_data: ::protobuf::SingularPtrField<SignatureKeyChallengeResponseData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeyChallengeResponse {
    fn default() -> &'a KeyChallengeResponse {
        <KeyChallengeResponse as ::protobuf::Message>::default_instance()
    }
}

impl KeyChallengeResponse {
    pub fn new() -> KeyChallengeResponse {
        ::std::default::Default::default()
    }

    // optional .cryptohome.SignatureKeyChallengeResponseData signature_response_data = 1;


    pub fn get_signature_response_data(&self) -> &SignatureKeyChallengeResponseData {
        self.signature_response_data.as_ref().unwrap_or_else(|| <SignatureKeyChallengeResponseData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signature_response_data(&mut self) {
        self.signature_response_data.clear();
    }

    pub fn has_signature_response_data(&self) -> bool {
        self.signature_response_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature_response_data(&mut self, v: SignatureKeyChallengeResponseData) {
        self.signature_response_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature_response_data(&mut self) -> &mut SignatureKeyChallengeResponseData {
        if self.signature_response_data.is_none() {
            self.signature_response_data.set_default();
        }
        self.signature_response_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature_response_data(&mut self) -> SignatureKeyChallengeResponseData {
        self.signature_response_data.take().unwrap_or_else(|| SignatureKeyChallengeResponseData::new())
    }
}

impl ::protobuf::Message for KeyChallengeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.signature_response_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature_response_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature_response_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature_response_data.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeyChallengeResponse {
        KeyChallengeResponse::new()
    }

    fn default_instance() -> &'static KeyChallengeResponse {
        static instance: ::protobuf::rt::LazyV2<KeyChallengeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeyChallengeResponse::new)
    }
}

impl ::protobuf::Clear for KeyChallengeResponse {
    fn clear(&mut self) {
        self.signature_response_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for KeyChallengeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SignatureKeyChallengeResponseData {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignatureKeyChallengeResponseData {
    fn default() -> &'a SignatureKeyChallengeResponseData {
        <SignatureKeyChallengeResponseData as ::protobuf::Message>::default_instance()
    }
}

impl SignatureKeyChallengeResponseData {
    pub fn new() -> SignatureKeyChallengeResponseData {
        ::std::default::Default::default()
    }

    // optional bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignatureKeyChallengeResponseData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignatureKeyChallengeResponseData {
        SignatureKeyChallengeResponseData::new()
    }

    fn default_instance() -> &'static SignatureKeyChallengeResponseData {
        static instance: ::protobuf::rt::LazyV2<SignatureKeyChallengeResponseData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignatureKeyChallengeResponseData::new)
    }
}

impl ::protobuf::Clear for SignatureKeyChallengeResponseData {
    fn clear(&mut self) {
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SignatureKeyChallengeResponseData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CryptohomeErrorCode {
    CRYPTOHOME_ERROR_NOT_SET = 0,
    CRYPTOHOME_ERROR_ACCOUNT_NOT_FOUND = 1,
    CRYPTOHOME_ERROR_AUTHORIZATION_KEY_NOT_FOUND = 2,
    CRYPTOHOME_ERROR_AUTHORIZATION_KEY_FAILED = 3,
    CRYPTOHOME_ERROR_NOT_IMPLEMENTED = 4,
    CRYPTOHOME_ERROR_MOUNT_FATAL = 5,
    CRYPTOHOME_ERROR_MOUNT_MOUNT_POINT_BUSY = 6,
    CRYPTOHOME_ERROR_TPM_COMM_ERROR = 7,
    CRYPTOHOME_ERROR_TPM_DEFEND_LOCK = 8,
    CRYPTOHOME_ERROR_TPM_NEEDS_REBOOT = 9,
    CRYPTOHOME_ERROR_AUTHORIZATION_KEY_DENIED = 10,
    CRYPTOHOME_ERROR_KEY_QUOTA_EXCEEDED = 11,
    CRYPTOHOME_ERROR_KEY_LABEL_EXISTS = 12,
    CRYPTOHOME_ERROR_BACKING_STORE_FAILURE = 13,
    CRYPTOHOME_ERROR_UPDATE_SIGNATURE_INVALID = 14,
    CRYPTOHOME_ERROR_KEY_NOT_FOUND = 15,
    CRYPTOHOME_ERROR_LOCKBOX_SIGNATURE_INVALID = 16,
    CRYPTOHOME_ERROR_LOCKBOX_CANNOT_SIGN = 17,
    CRYPTOHOME_ERROR_BOOT_ATTRIBUTE_NOT_FOUND = 18,
    CRYPTOHOME_ERROR_BOOT_ATTRIBUTES_CANNOT_SIGN = 19,
    CRYPTOHOME_ERROR_TPM_EK_NOT_AVAILABLE = 20,
    CRYPTOHOME_ERROR_ATTESTATION_NOT_READY = 21,
    CRYPTOHOME_ERROR_CANNOT_CONNECT_TO_CA = 22,
    CRYPTOHOME_ERROR_CA_REFUSED_ENROLLMENT = 23,
    CRYPTOHOME_ERROR_CA_REFUSED_CERTIFICATE = 24,
    CRYPTOHOME_ERROR_INTERNAL_ATTESTATION_ERROR = 25,
    CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_INVALID = 26,
    CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_STORE = 27,
    CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_REMOVE = 28,
    CRYPTOHOME_ERROR_MOUNT_OLD_ENCRYPTION = 29,
    CRYPTOHOME_ERROR_MOUNT_PREVIOUS_MIGRATION_INCOMPLETE = 30,
    CRYPTOHOME_ERROR_MIGRATE_KEY_FAILED = 31,
    CRYPTOHOME_ERROR_REMOVE_FAILED = 32,
    CRYPTOHOME_ERROR_INVALID_ARGUMENT = 33,
    CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_GET_FAILED = 34,
    CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_SET_FAILED = 35,
    CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_FINALIZE_FAILED = 36,
    CRYPTOHOME_ERROR_UPDATE_USER_ACTIVITY_TIMESTAMP_FAILED = 37,
    CRYPTOHOME_ERROR_FAILED_TO_READ_PCR = 38,
    CRYPTOHOME_ERROR_PCR_ALREADY_EXTENDED = 39,
    CRYPTOHOME_ERROR_FAILED_TO_EXTEND_PCR = 40,
    CRYPTOHOME_ERROR_TPM_UPDATE_REQUIRED = 41,
    CRYPTOHOME_ERROR_FINGERPRINT_ERROR_INTERNAL = 42,
    CRYPTOHOME_ERROR_FINGERPRINT_RETRY_REQUIRED = 43,
    CRYPTOHOME_ERROR_FINGERPRINT_DENIED = 44,
    CRYPTOHOME_ERROR_VAULT_UNRECOVERABLE = 45,
    CRYPTOHOME_ERROR_FIDO_MAKE_CREDENTIAL_FAILED = 46,
    CRYPTOHOME_ERROR_FIDO_GET_ASSERTION_FAILED = 47,
    CRYPTOHOME_TOKEN_SERIALIZATION_FAILED = 48,
    CRYPTOHOME_INVALID_AUTH_SESSION_TOKEN = 49,
    CRYPTOHOME_ADD_CREDENTIALS_FAILED = 50,
    CRYPTOHOME_ERROR_UNAUTHENTICATED_AUTH_SESSION = 51,
    CRYPTOHOME_ERROR_UNKNOWN_LEGACY = 52,
    CRYPTOHOME_ERROR_UNUSABLE_VAULT = 53,
    CRYPTOHOME_REMOVE_CREDENTIALS_FAILED = 54,
    CRYPTOHOME_UPDATE_CREDENTIALS_FAILED = 55,
}

impl ::protobuf::ProtobufEnum for CryptohomeErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CryptohomeErrorCode> {
        match value {
            0 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_SET),
            1 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_ACCOUNT_NOT_FOUND),
            2 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_NOT_FOUND),
            3 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_FAILED),
            4 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_IMPLEMENTED),
            5 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_FATAL),
            6 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_MOUNT_POINT_BUSY),
            7 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_COMM_ERROR),
            8 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_DEFEND_LOCK),
            9 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_NEEDS_REBOOT),
            10 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_DENIED),
            11 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_QUOTA_EXCEEDED),
            12 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_LABEL_EXISTS),
            13 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_BACKING_STORE_FAILURE),
            14 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_SIGNATURE_INVALID),
            15 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_NOT_FOUND),
            16 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_SIGNATURE_INVALID),
            17 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_CANNOT_SIGN),
            18 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTE_NOT_FOUND),
            19 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTES_CANNOT_SIGN),
            20 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_EK_NOT_AVAILABLE),
            21 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_ATTESTATION_NOT_READY),
            22 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CANNOT_CONNECT_TO_CA),
            23 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_ENROLLMENT),
            24 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_CERTIFICATE),
            25 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INTERNAL_ATTESTATION_ERROR),
            26 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_INVALID),
            27 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_STORE),
            28 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_REMOVE),
            29 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_OLD_ENCRYPTION),
            30 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_PREVIOUS_MIGRATION_INCOMPLETE),
            31 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_MIGRATE_KEY_FAILED),
            32 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_REMOVE_FAILED),
            33 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INVALID_ARGUMENT),
            34 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_GET_FAILED),
            35 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_SET_FAILED),
            36 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_FINALIZE_FAILED),
            37 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_USER_ACTIVITY_TIMESTAMP_FAILED),
            38 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_READ_PCR),
            39 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_PCR_ALREADY_EXTENDED),
            40 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_EXTEND_PCR),
            41 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_UPDATE_REQUIRED),
            42 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_ERROR_INTERNAL),
            43 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_RETRY_REQUIRED),
            44 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_DENIED),
            45 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_VAULT_UNRECOVERABLE),
            46 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_MAKE_CREDENTIAL_FAILED),
            47 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_GET_ASSERTION_FAILED),
            48 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_TOKEN_SERIALIZATION_FAILED),
            49 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_INVALID_AUTH_SESSION_TOKEN),
            50 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ADD_CREDENTIALS_FAILED),
            51 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UNAUTHENTICATED_AUTH_SESSION),
            52 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UNKNOWN_LEGACY),
            53 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_ERROR_UNUSABLE_VAULT),
            54 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_REMOVE_CREDENTIALS_FAILED),
            55 => ::std::option::Option::Some(CryptohomeErrorCode::CRYPTOHOME_UPDATE_CREDENTIALS_FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CryptohomeErrorCode] = &[
            CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_SET,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_ACCOUNT_NOT_FOUND,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_NOT_FOUND,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_IMPLEMENTED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_FATAL,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_MOUNT_POINT_BUSY,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_COMM_ERROR,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_DEFEND_LOCK,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_NEEDS_REBOOT,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_AUTHORIZATION_KEY_DENIED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_QUOTA_EXCEEDED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_LABEL_EXISTS,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_BACKING_STORE_FAILURE,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_SIGNATURE_INVALID,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_KEY_NOT_FOUND,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_SIGNATURE_INVALID,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_LOCKBOX_CANNOT_SIGN,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTE_NOT_FOUND,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_BOOT_ATTRIBUTES_CANNOT_SIGN,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_EK_NOT_AVAILABLE,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_ATTESTATION_NOT_READY,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_CANNOT_CONNECT_TO_CA,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_ENROLLMENT,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_CA_REFUSED_CERTIFICATE,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_INTERNAL_ATTESTATION_ERROR,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_INVALID,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_STORE,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FIRMWARE_MANAGEMENT_PARAMETERS_CANNOT_REMOVE,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_OLD_ENCRYPTION,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_MOUNT_PREVIOUS_MIGRATION_INCOMPLETE,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_MIGRATE_KEY_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_REMOVE_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_INVALID_ARGUMENT,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_GET_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_SET_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_INSTALL_ATTRIBUTES_FINALIZE_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_UPDATE_USER_ACTIVITY_TIMESTAMP_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_READ_PCR,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_PCR_ALREADY_EXTENDED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FAILED_TO_EXTEND_PCR,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_TPM_UPDATE_REQUIRED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_ERROR_INTERNAL,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_RETRY_REQUIRED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FINGERPRINT_DENIED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_VAULT_UNRECOVERABLE,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_MAKE_CREDENTIAL_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_FIDO_GET_ASSERTION_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_TOKEN_SERIALIZATION_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_INVALID_AUTH_SESSION_TOKEN,
            CryptohomeErrorCode::CRYPTOHOME_ADD_CREDENTIALS_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_UNAUTHENTICATED_AUTH_SESSION,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_UNKNOWN_LEGACY,
            CryptohomeErrorCode::CRYPTOHOME_ERROR_UNUSABLE_VAULT,
            CryptohomeErrorCode::CRYPTOHOME_REMOVE_CREDENTIALS_FAILED,
            CryptohomeErrorCode::CRYPTOHOME_UPDATE_CREDENTIALS_FAILED,
        ];
        values
    }
}

impl ::std::marker::Copy for CryptohomeErrorCode {
}

impl ::std::default::Default for CryptohomeErrorCode {
    fn default() -> Self {
        CryptohomeErrorCode::CRYPTOHOME_ERROR_NOT_SET
    }
}

impl ::protobuf::reflect::ProtobufValue for CryptohomeErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FirmwareManagementParametersFlags {
    NONE = 0,
    DEVELOPER_DISABLE_BOOT = 1,
    DEVELOPER_DISABLE_RECOVERY_INSTALL = 2,
    DEVELOPER_DISABLE_RECOVERY_ROOTFS = 4,
    DEVELOPER_ENABLE_USB = 8,
    DEVELOPER_ENABLE_LEGACY = 16,
    DEVELOPER_USE_KEY_HASH = 32,
    DEVELOPER_DISABLE_CASE_CLOSED_DEBUGGING_UNLOCK = 64,
}

impl ::protobuf::ProtobufEnum for FirmwareManagementParametersFlags {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FirmwareManagementParametersFlags> {
        match value {
            0 => ::std::option::Option::Some(FirmwareManagementParametersFlags::NONE),
            1 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_BOOT),
            2 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_INSTALL),
            4 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_ROOTFS),
            8 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_ENABLE_USB),
            16 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_ENABLE_LEGACY),
            32 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_USE_KEY_HASH),
            64 => ::std::option::Option::Some(FirmwareManagementParametersFlags::DEVELOPER_DISABLE_CASE_CLOSED_DEBUGGING_UNLOCK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FirmwareManagementParametersFlags] = &[
            FirmwareManagementParametersFlags::NONE,
            FirmwareManagementParametersFlags::DEVELOPER_DISABLE_BOOT,
            FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_INSTALL,
            FirmwareManagementParametersFlags::DEVELOPER_DISABLE_RECOVERY_ROOTFS,
            FirmwareManagementParametersFlags::DEVELOPER_ENABLE_USB,
            FirmwareManagementParametersFlags::DEVELOPER_ENABLE_LEGACY,
            FirmwareManagementParametersFlags::DEVELOPER_USE_KEY_HASH,
            FirmwareManagementParametersFlags::DEVELOPER_DISABLE_CASE_CLOSED_DEBUGGING_UNLOCK,
        ];
        values
    }
}

impl ::std::marker::Copy for FirmwareManagementParametersFlags {
}

impl ::std::default::Default for FirmwareManagementParametersFlags {
    fn default() -> Self {
        FirmwareManagementParametersFlags::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for FirmwareManagementParametersFlags {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
